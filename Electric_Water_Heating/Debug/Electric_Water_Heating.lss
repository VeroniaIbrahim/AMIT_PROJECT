
Electric_Water_Heating.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000324e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  0000324e  000032e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080016e  0080016e  000033f0  2**0
                  ALLOC
  3 .stab         000034d4  00000000  00000000  000033f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000146f  00000000  00000000  000068c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000080c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b856  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ca2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cbec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d850  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_1>
       8:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_2>
       c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 18 	call	0x313e	; 0x313e <main>
      8a:	0c 94 25 19 	jmp	0x324a	; 0x324a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
#include"ADC_Private.h"

void (*CallBackFun)(void);

void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*1-Select Reference Voltage-->  (AVCC)*/
	SET_BIT(ADMUX,6);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
	/*2- Select Left or Right Adjust--> (RIGHT Adjust) */
	CLR_BIT(ADMUX,5);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
	/*3- Select Prescaler (128)*/
	SET_BIT(ADCSRA,2);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	84 60       	ori	r24, 0x04	; 4
     e6c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,0);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	8c 93       	st	X, r24
	/*4- ADC Enable*/
	SET_BIT(ADCSRA,7);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_u16StartConversion>:
u16 ADC_u16StartConversion(u8 Copy_u8Channel)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <ADC_u16StartConversion+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <ADC_u16StartConversion+0x8>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	8b 83       	std	Y+3, r24	; 0x03
	u16 LOC_u16DataValue=0;
     eac:	1a 82       	std	Y+2, r1	; 0x02
     eae:	19 82       	std	Y+1, r1	; 0x01
	/*Mask the 5 MSB IN the data */
	Copy_u8Channel&=0x07;
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	87 70       	andi	r24, 0x07	; 7
     eb4:	8b 83       	std	Y+3, r24	; 0x03
	/*MASK The 5 LSB In ADMUX Register */
	ADMUX&=0xE0;
     eb6:	a7 e2       	ldi	r26, 0x27	; 39
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e7 e2       	ldi	r30, 0x27	; 39
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 7e       	andi	r24, 0xE0	; 224
     ec2:	8c 93       	st	X, r24
	/*Set your channel*/
	ADMUX|=Copy_u8Channel;
     ec4:	a7 e2       	ldi	r26, 0x27	; 39
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e7 e2       	ldi	r30, 0x27	; 39
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	90 81       	ld	r25, Z
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	89 2b       	or	r24, r25
     ed2:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA,6);
     ed4:	a6 e2       	ldi	r26, 0x26	; 38
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e6 e2       	ldi	r30, 0x26	; 38
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 64       	ori	r24, 0x40	; 64
     ee0:	8c 93       	st	X, r24
	/*wait ADC Flag until ADC End conversion*/
	while(GET_BIT(ADCSRA,4)==0);
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
	//LOC_u16DataValue=ADCL|(ADCH<<8);
	LOC_u16DataValue=ADC;
     ee8:	e4 e2       	ldi	r30, 0x24	; 36
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
	return LOC_u16DataValue;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <ADC_voidInit_Interrupt>:
void ADC_voidInit_Interrupt(void)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	/*1-Select Reference Voltage-->  (AVCC)*/
	SET_BIT(ADMUX,6);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
     f1c:	a7 e2       	ldi	r26, 0x27	; 39
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e2       	ldi	r30, 0x27	; 39
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 77       	andi	r24, 0x7F	; 127
     f28:	8c 93       	st	X, r24
	/*2- Select Left or Right Adjust--> (RIGHT Adjust) */
	CLR_BIT(ADMUX,5);
     f2a:	a7 e2       	ldi	r26, 0x27	; 39
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e2       	ldi	r30, 0x27	; 39
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7d       	andi	r24, 0xDF	; 223
     f36:	8c 93       	st	X, r24
	/*3- Select Prescaler (128)*/
	SET_BIT(ADCSRA,2);
     f38:	a6 e2       	ldi	r26, 0x26	; 38
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e6 e2       	ldi	r30, 0x26	; 38
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	84 60       	ori	r24, 0x04	; 4
     f44:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     f46:	a6 e2       	ldi	r26, 0x26	; 38
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e6 e2       	ldi	r30, 0x26	; 38
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	82 60       	ori	r24, 0x02	; 2
     f52:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,0);
     f54:	a6 e2       	ldi	r26, 0x26	; 38
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e2       	ldi	r30, 0x26	; 38
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	8c 93       	st	X, r24
	/*4- ADC Enable*/
	SET_BIT(ADCSRA,7);
     f62:	a6 e2       	ldi	r26, 0x26	; 38
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e6 e2       	ldi	r30, 0x26	; 38
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 68       	ori	r24, 0x80	; 128
     f6e:	8c 93       	st	X, r24
	/*ADC Interrupt Enable*/
	SET_BIT(ADCSRA,3);
     f70:	a6 e2       	ldi	r26, 0x26	; 38
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e6 e2       	ldi	r30, 0x26	; 38
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	88 60       	ori	r24, 0x08	; 8
     f7c:	8c 93       	st	X, r24
}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <ADC_INTERRUPT_DISABLE>:

void ADC_INTERRUPT_DISABLE(void)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,3);
     f8c:	a6 e2       	ldi	r26, 0x26	; 38
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e6 e2       	ldi	r30, 0x26	; 38
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	87 7f       	andi	r24, 0xF7	; 247
     f98:	8c 93       	st	X, r24

}
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <ADC_INTERRUPT_ENABLE>:

void ADC_INTERRUPT_ENABLE(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,3);
     fa8:	a6 e2       	ldi	r26, 0x26	; 38
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e6 e2       	ldi	r30, 0x26	; 38
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 60       	ori	r24, 0x08	; 8
     fb4:	8c 93       	st	X, r24

}
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <ADC_u16StartConversion_Interrupt>:
void ADC_u16StartConversion_Interrupt(u8 Copy_u8Channel)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	89 83       	std	Y+1, r24	; 0x01
	/*Mask the 5 MSB IN the data */
	Copy_u8Channel&=0x07;
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	87 70       	andi	r24, 0x07	; 7
     fcc:	89 83       	std	Y+1, r24	; 0x01
	/*MASK The 5 LSB In ADMUX Register */
	ADMUX&=0xE0;
     fce:	a7 e2       	ldi	r26, 0x27	; 39
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e7 e2       	ldi	r30, 0x27	; 39
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 7e       	andi	r24, 0xE0	; 224
     fda:	8c 93       	st	X, r24
	/*Set your channel*/
	ADMUX|=Copy_u8Channel;
     fdc:	a7 e2       	ldi	r26, 0x27	; 39
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e7 e2       	ldi	r30, 0x27	; 39
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	90 81       	ld	r25, Z
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	89 2b       	or	r24, r25
     fea:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA,6);
     fec:	a6 e2       	ldi	r26, 0x26	; 38
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e6 e2       	ldi	r30, 0x26	; 38
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	8c 93       	st	X, r24
}
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <ADC_u16DigitalRead>:
u16 ADC_u16DigitalRead(void)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	return ADC;
    100a:	e4 e2       	ldi	r30, 0x24	; 36
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <ADC_voidSet_CallBackFunction>:

void ADC_voidSet_CallBackFunction(void(*Copy_voidP_CallBackFun)(void))
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <ADC_voidSet_CallBackFunction+0x6>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01
	CallBackFun=Copy_voidP_CallBackFun;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	90 93 7a 01 	sts	0x017A, r25
    102e:	80 93 79 01 	sts	0x0179, r24
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <__vector_16>:
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	CallBackFun();
    1066:	e0 91 79 01 	lds	r30, 0x0179
    106a:	f0 91 7a 01 	lds	r31, 0x017A
    106e:	09 95       	icall
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	7f 91       	pop	r23
    1082:	6f 91       	pop	r22
    1084:	5f 91       	pop	r21
    1086:	4f 91       	pop	r20
    1088:	3f 91       	pop	r19
    108a:	2f 91       	pop	r18
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	0f 90       	pop	r0
    1092:	1f 90       	pop	r1
    1094:	18 95       	reti

00001096 <DIO_u8SetPinDirection>:
#include"BIT_MATH.h"
#include"DIO_Interface.h"
#include"DIO_Private.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	28 97       	sbiw	r28, 0x08	; 8
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	8a 83       	std	Y+2, r24	; 0x02
    10ac:	6b 83       	std	Y+3, r22	; 0x03
    10ae:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State=OK;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber<8)&&(Copy_u8PinNumber>=0))
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	88 30       	cpi	r24, 0x08	; 8
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <DIO_u8SetPinDirection+0x26>
    10ba:	f1 c0       	rjmp	.+482    	; 0x129e <DIO_u8SetPinDirection+0x208>
	{
		if(Copy_u8PinDirection==PIN_OUTPUT)
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <DIO_u8SetPinDirection+0x2e>
    10c2:	71 c0       	rjmp	.+226    	; 0x11a6 <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8PortNumber)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	38 87       	std	Y+8, r19	; 0x08
    10cc:	2f 83       	std	Y+7, r18	; 0x07
    10ce:	8f 81       	ldd	r24, Y+7	; 0x07
    10d0:	98 85       	ldd	r25, Y+8	; 0x08
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	91 05       	cpc	r25, r1
    10d6:	49 f1       	breq	.+82     	; 0x112a <DIO_u8SetPinDirection+0x94>
    10d8:	2f 81       	ldd	r18, Y+7	; 0x07
    10da:	38 85       	ldd	r19, Y+8	; 0x08
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	2c f4       	brge	.+10     	; 0x10ec <DIO_u8SetPinDirection+0x56>
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	98 85       	ldd	r25, Y+8	; 0x08
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	61 f0       	breq	.+24     	; 0x1102 <DIO_u8SetPinDirection+0x6c>
    10ea:	5b c0       	rjmp	.+182    	; 0x11a2 <DIO_u8SetPinDirection+0x10c>
    10ec:	2f 81       	ldd	r18, Y+7	; 0x07
    10ee:	38 85       	ldd	r19, Y+8	; 0x08
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	71 f1       	breq	.+92     	; 0x1152 <DIO_u8SetPinDirection+0xbc>
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	91 05       	cpc	r25, r1
    10fe:	e9 f1       	breq	.+122    	; 0x117a <DIO_u8SetPinDirection+0xe4>
    1100:	50 c0       	rjmp	.+160    	; 0x11a2 <DIO_u8SetPinDirection+0x10c>
			{
			case DIO_PORTA:
				SET_BIT(DDRA,Copy_u8PinNumber);
    1102:	aa e3       	ldi	r26, 0x3A	; 58
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ea e3       	ldi	r30, 0x3A	; 58
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_u8SetPinDirection+0x8a>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_u8SetPinDirection+0x86>
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	bb c0       	rjmp	.+374    	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB,Copy_u8PinNumber);
    112a:	a7 e3       	ldi	r26, 0x37	; 55
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e7 e3       	ldi	r30, 0x37	; 55
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_u8SetPinDirection+0xb2>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_u8SetPinDirection+0xae>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	a7 c0       	rjmp	.+334    	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC,Copy_u8PinNumber);
    1152:	a4 e3       	ldi	r26, 0x34	; 52
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e4 e3       	ldi	r30, 0x34	; 52
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_u8SetPinDirection+0xda>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_u8SetPinDirection+0xd6>
    1174:	84 2b       	or	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	93 c0       	rjmp	.+294    	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD,Copy_u8PinNumber);
    117a:	a1 e3       	ldi	r26, 0x31	; 49
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e1 e3       	ldi	r30, 0x31	; 49
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_u8SetPinDirection+0x102>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_u8SetPinDirection+0xfe>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	7f c0       	rjmp	.+254    	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			default:
				Error_State=NOK;
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	7d c0       	rjmp	.+250    	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			}

		}
		else if(Copy_u8PinDirection==PIN_INPUT)
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	88 23       	and	r24, r24
    11aa:	09 f0       	breq	.+2      	; 0x11ae <DIO_u8SetPinDirection+0x118>
    11ac:	76 c0       	rjmp	.+236    	; 0x129a <DIO_u8SetPinDirection+0x204>
		{
			switch(Copy_u8PortNumber)
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3e 83       	std	Y+6, r19	; 0x06
    11b6:	2d 83       	std	Y+5, r18	; 0x05
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	59 f1       	breq	.+86     	; 0x1218 <DIO_u8SetPinDirection+0x182>
    11c2:	2d 81       	ldd	r18, Y+5	; 0x05
    11c4:	3e 81       	ldd	r19, Y+6	; 0x06
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <DIO_u8SetPinDirection+0x140>
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f0       	breq	.+26     	; 0x11ee <DIO_u8SetPinDirection+0x158>
    11d4:	60 c0       	rjmp	.+192    	; 0x1296 <DIO_u8SetPinDirection+0x200>
    11d6:	2d 81       	ldd	r18, Y+5	; 0x05
    11d8:	3e 81       	ldd	r19, Y+6	; 0x06
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	89 f1       	breq	.+98     	; 0x1242 <DIO_u8SetPinDirection+0x1ac>
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <DIO_u8SetPinDirection+0x156>
    11ea:	40 c0       	rjmp	.+128    	; 0x126c <DIO_u8SetPinDirection+0x1d6>
    11ec:	54 c0       	rjmp	.+168    	; 0x1296 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA,Copy_u8PinNumber);
    11ee:	aa e3       	ldi	r26, 0x3A	; 58
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ea e3       	ldi	r30, 0x3A	; 58
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8SetPinDirection+0x176>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8SetPinDirection+0x172>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	44 c0       	rjmp	.+136    	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1218:	a7 e3       	ldi	r26, 0x37	; 55
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e7 e3       	ldi	r30, 0x37	; 55
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_u8SetPinDirection+0x1a0>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_u8SetPinDirection+0x19c>
    123a:	80 95       	com	r24
    123c:	84 23       	and	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	2f c0       	rjmp	.+94     	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC,Copy_u8PinNumber);
    1242:	a4 e3       	ldi	r26, 0x34	; 52
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e4 e3       	ldi	r30, 0x34	; 52
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8SetPinDirection+0x1ca>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8SetPinDirection+0x1c6>
    1264:	80 95       	com	r24
    1266:	84 23       	and	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	1a c0       	rjmp	.+52     	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD,Copy_u8PinNumber);
    126c:	a1 e3       	ldi	r26, 0x31	; 49
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e1 e3       	ldi	r30, 0x31	; 49
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_u8SetPinDirection+0x1f4>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_u8SetPinDirection+0x1f0>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
				break;
			default:
				Error_State=NOK;
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
			}

		}
		else
		{
			Error_State=NOK;
    129a:	19 82       	std	Y+1, r1	; 0x01
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <DIO_u8SetPinDirection+0x20a>
		}
	}
	else
	{
		Error_State=NOK;
    129e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a2:	28 96       	adiw	r28, 0x08	; 8
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <DIO_u8SetPinValue+0x6>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <DIO_u8SetPinValue+0x8>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <DIO_u8SetPinValue+0xa>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	8a 83       	std	Y+2, r24	; 0x02
    12c4:	6b 83       	std	Y+3, r22	; 0x03
    12c6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State=OK;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber<8)&&(Copy_u8PinNumber>=0))
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	88 30       	cpi	r24, 0x08	; 8
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <DIO_u8SetPinValue+0x20>
    12d2:	e8 c0       	rjmp	.+464    	; 0x14a4 <DIO_u8SetPinValue+0x1f0>
	{
		switch(Copy_u8PortNumber)
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3e 83       	std	Y+6, r19	; 0x06
    12dc:	2d 83       	std	Y+5, r18	; 0x05
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <DIO_u8SetPinValue+0x36>
    12e8:	48 c0       	rjmp	.+144    	; 0x137a <DIO_u8SetPinValue+0xc6>
    12ea:	2d 81       	ldd	r18, Y+5	; 0x05
    12ec:	3e 81       	ldd	r19, Y+6	; 0x06
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	2c f4       	brge	.+10     	; 0x12fe <DIO_u8SetPinValue+0x4a>
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	71 f0       	breq	.+28     	; 0x1318 <DIO_u8SetPinValue+0x64>
    12fc:	d1 c0       	rjmp	.+418    	; 0x14a0 <DIO_u8SetPinValue+0x1ec>
    12fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1300:	3e 81       	ldd	r19, Y+6	; 0x06
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <DIO_u8SetPinValue+0x56>
    1308:	69 c0       	rjmp	.+210    	; 0x13dc <DIO_u8SetPinValue+0x128>
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	91 05       	cpc	r25, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <DIO_u8SetPinValue+0x62>
    1314:	94 c0       	rjmp	.+296    	; 0x143e <DIO_u8SetPinValue+0x18a>
    1316:	c4 c0       	rjmp	.+392    	; 0x14a0 <DIO_u8SetPinValue+0x1ec>
		{
		case DIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	a1 f4       	brne	.+40     	; 0x1346 <DIO_u8SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    131e:	ab e3       	ldi	r26, 0x3B	; 59
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	eb e3       	ldi	r30, 0x3B	; 59
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_u8SetPinValue+0x88>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_u8SetPinValue+0x84>
    1340:	84 2b       	or	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	b0 c0       	rjmp	.+352    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	88 23       	and	r24, r24
    134a:	a9 f4       	brne	.+42     	; 0x1376 <DIO_u8SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    134c:	ab e3       	ldi	r26, 0x3B	; 59
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	eb e3       	ldi	r30, 0x3B	; 59
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_u8SetPinValue+0xb6>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_u8SetPinValue+0xb2>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	98 c0       	rjmp	.+304    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State=NOK;
    1376:	19 82       	std	Y+1, r1	; 0x01
    1378:	96 c0       	rjmp	.+300    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	a1 f4       	brne	.+40     	; 0x13a8 <DIO_u8SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    1380:	a8 e3       	ldi	r26, 0x38	; 56
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e8 e3       	ldi	r30, 0x38	; 56
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8SetPinValue+0xea>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_u8SetPinValue+0xe6>
    13a2:	84 2b       	or	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	7f c0       	rjmp	.+254    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	88 23       	and	r24, r24
    13ac:	a9 f4       	brne	.+42     	; 0x13d8 <DIO_u8SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    13ae:	a8 e3       	ldi	r26, 0x38	; 56
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e8 e3       	ldi	r30, 0x38	; 56
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_u8SetPinValue+0x118>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_u8SetPinValue+0x114>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	67 c0       	rjmp	.+206    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State=NOK;
    13d8:	19 82       	std	Y+1, r1	; 0x01
    13da:	65 c0       	rjmp	.+202    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTC:
			if(Copy_u8PinValue==PIN_HIGH)
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	a1 f4       	brne	.+40     	; 0x140a <DIO_u8SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    13e2:	a5 e3       	ldi	r26, 0x35	; 53
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e5 e3       	ldi	r30, 0x35	; 53
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_u8SetPinValue+0x14c>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_u8SetPinValue+0x148>
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	4e c0       	rjmp	.+156    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	88 23       	and	r24, r24
    140e:	a9 f4       	brne	.+42     	; 0x143a <DIO_u8SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1410:	a5 e3       	ldi	r26, 0x35	; 53
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8SetPinValue+0x17a>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8SetPinValue+0x176>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	36 c0       	rjmp	.+108    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State=NOK;
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	34 c0       	rjmp	.+104    	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTD:
			if(Copy_u8PinValue==PIN_HIGH)
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	a1 f4       	brne	.+40     	; 0x146c <DIO_u8SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    1444:	a2 e3       	ldi	r26, 0x32	; 50
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e2 e3       	ldi	r30, 0x32	; 50
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_u8SetPinValue+0x1ae>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_u8SetPinValue+0x1aa>
    1466:	84 2b       	or	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	1d c0       	rjmp	.+58     	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	88 23       	and	r24, r24
    1470:	a9 f4       	brne	.+42     	; 0x149c <DIO_u8SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    1472:	a2 e3       	ldi	r26, 0x32	; 50
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e2 e3       	ldi	r30, 0x32	; 50
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_u8SetPinValue+0x1dc>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_u8SetPinValue+0x1d8>
    1494:	80 95       	com	r24
    1496:	84 23       	and	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State=NOK;
    149c:	19 82       	std	Y+1, r1	; 0x01
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			}
			break;
		default:
			Error_State=NOK;
    14a0:	19 82       	std	Y+1, r1	; 0x01
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <DIO_u8SetPinValue+0x1f2>
			break;
		}
	}
	else
	{
		Error_State=NOK;
    14a4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a8:	26 96       	adiw	r28, 0x06	; 6
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DIO_u8SetPortValue>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PinDirection);
u8 DIO_u8SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PinValue);*/

void DIO_u8SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_u8SetPortValue+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_u8SetPortValue+0x8>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNumber)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <DIO_u8SetPortValue+0x58>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <DIO_u8SetPortValue+0x38>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <DIO_u8SetPortValue+0x4e>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <DIO_u8SetPortValue+0x74>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <DIO_u8SetPortValue+0x62>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <DIO_u8SetPortValue+0x6c>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <DIO_u8SetPortValue+0x74>
	{
	case DIO_PORTA :PORTA =  Copy_u8PortValue ;break;
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	0e c0       	rjmp	.+28     	; 0x152e <DIO_u8SetPortValue+0x74>
	case DIO_PORTB : PORTB =  Copy_u8PortValue ;break;
    1512:	e8 e3       	ldi	r30, 0x38	; 56
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	09 c0       	rjmp	.+18     	; 0x152e <DIO_u8SetPortValue+0x74>
	case DIO_PORTC : PORTC =  Copy_u8PortValue ;break;
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	04 c0       	rjmp	.+8      	; 0x152e <DIO_u8SetPortValue+0x74>
	case DIO_PORTD : PORTD =  Copy_u8PortValue ;break;
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24
	}

}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <DIO_u8SetPortDirection>:
void DIO_u8SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_u8SetPortDirection+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_u8SetPortDirection+0x8>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNumber)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	d1 f0       	breq	.+52     	; 0x1594 <DIO_u8SetPortDirection+0x58>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <DIO_u8SetPortDirection+0x38>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 f0       	breq	.+24     	; 0x158a <DIO_u8SetPortDirection+0x4e>
    1572:	1e c0       	rjmp	.+60     	; 0x15b0 <DIO_u8SetPortDirection+0x74>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <DIO_u8SetPortDirection+0x62>
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	81 f0       	breq	.+32     	; 0x15a8 <DIO_u8SetPortDirection+0x6c>
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <DIO_u8SetPortDirection+0x74>
	{
	case DIO_PORTA : DDRA =  Copy_u8PortDirection ;break;
    158a:	ea e3       	ldi	r30, 0x3A	; 58
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 83       	st	Z, r24
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <DIO_u8SetPortDirection+0x74>
	case DIO_PORTB : DDRB =  Copy_u8PortDirection ;break;
    1594:	e7 e3       	ldi	r30, 0x37	; 55
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	80 83       	st	Z, r24
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <DIO_u8SetPortDirection+0x74>
	case DIO_PORTC : DDRC =  Copy_u8PortDirection ;break;
    159e:	e4 e3       	ldi	r30, 0x34	; 52
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	80 83       	st	Z, r24
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <DIO_u8SetPortDirection+0x74>
	case DIO_PORTD : DDRD =  Copy_u8PortDirection ;break;
    15a8:	e1 e3       	ldi	r30, 0x31	; 49
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 83       	st	Z, r24
	}

}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* Copy_u8PinValue)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	27 97       	sbiw	r28, 0x07	; 7
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	8a 83       	std	Y+2, r24	; 0x02
    15d4:	6b 83       	std	Y+3, r22	; 0x03
    15d6:	5d 83       	std	Y+5, r21	; 0x05
    15d8:	4c 83       	std	Y+4, r20	; 0x04
	u8 ErrorState=OK;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinNumber<8)
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	88 30       	cpi	r24, 0x08	; 8
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <DIO_u8GetPinValue+0x28>
    15e4:	73 c0       	rjmp	.+230    	; 0x16cc <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8PortNumber)
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3f 83       	std	Y+7, r19	; 0x07
    15ee:	2e 83       	std	Y+6, r18	; 0x06
    15f0:	4e 81       	ldd	r20, Y+6	; 0x06
    15f2:	5f 81       	ldd	r21, Y+7	; 0x07
    15f4:	41 30       	cpi	r20, 0x01	; 1
    15f6:	51 05       	cpc	r21, r1
    15f8:	59 f1       	breq	.+86     	; 0x1650 <DIO_u8GetPinValue+0x92>
    15fa:	8e 81       	ldd	r24, Y+6	; 0x06
    15fc:	9f 81       	ldd	r25, Y+7	; 0x07
    15fe:	82 30       	cpi	r24, 0x02	; 2
    1600:	91 05       	cpc	r25, r1
    1602:	34 f4       	brge	.+12     	; 0x1610 <DIO_u8GetPinValue+0x52>
    1604:	2e 81       	ldd	r18, Y+6	; 0x06
    1606:	3f 81       	ldd	r19, Y+7	; 0x07
    1608:	21 15       	cp	r18, r1
    160a:	31 05       	cpc	r19, r1
    160c:	69 f0       	breq	.+26     	; 0x1628 <DIO_u8GetPinValue+0x6a>
    160e:	5c c0       	rjmp	.+184    	; 0x16c8 <DIO_u8GetPinValue+0x10a>
    1610:	4e 81       	ldd	r20, Y+6	; 0x06
    1612:	5f 81       	ldd	r21, Y+7	; 0x07
    1614:	42 30       	cpi	r20, 0x02	; 2
    1616:	51 05       	cpc	r21, r1
    1618:	79 f1       	breq	.+94     	; 0x1678 <DIO_u8GetPinValue+0xba>
    161a:	8e 81       	ldd	r24, Y+6	; 0x06
    161c:	9f 81       	ldd	r25, Y+7	; 0x07
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <DIO_u8GetPinValue+0x68>
    1624:	3d c0       	rjmp	.+122    	; 0x16a0 <DIO_u8GetPinValue+0xe2>
    1626:	50 c0       	rjmp	.+160    	; 0x16c8 <DIO_u8GetPinValue+0x10a>
		{
		case DIO_PORTA :
			*Copy_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
    1628:	e9 e3       	ldi	r30, 0x39	; 57
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a9 01       	movw	r20, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_u8GetPinValue+0x82>
    163c:	55 95       	asr	r21
    163e:	47 95       	ror	r20
    1640:	8a 95       	dec	r24
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_u8GetPinValue+0x7e>
    1644:	ca 01       	movw	r24, r20
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	ec 81       	ldd	r30, Y+4	; 0x04
    164a:	fd 81       	ldd	r31, Y+5	; 0x05
    164c:	80 83       	st	Z, r24
    164e:	3f c0       	rjmp	.+126    	; 0x16ce <DIO_u8GetPinValue+0x110>
			break;
		case DIO_PORTB :
			*Copy_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
    1650:	e6 e3       	ldi	r30, 0x36	; 54
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_u8GetPinValue+0xaa>
    1664:	55 95       	asr	r21
    1666:	47 95       	ror	r20
    1668:	8a 95       	dec	r24
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_u8GetPinValue+0xa6>
    166c:	ca 01       	movw	r24, r20
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	ec 81       	ldd	r30, Y+4	; 0x04
    1672:	fd 81       	ldd	r31, Y+5	; 0x05
    1674:	80 83       	st	Z, r24
    1676:	2b c0       	rjmp	.+86     	; 0x16ce <DIO_u8GetPinValue+0x110>
			break;
		case DIO_PORTC :
			*Copy_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
    1678:	e3 e3       	ldi	r30, 0x33	; 51
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a9 01       	movw	r20, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_u8GetPinValue+0xd2>
    168c:	55 95       	asr	r21
    168e:	47 95       	ror	r20
    1690:	8a 95       	dec	r24
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_u8GetPinValue+0xce>
    1694:	ca 01       	movw	r24, r20
    1696:	81 70       	andi	r24, 0x01	; 1
    1698:	ec 81       	ldd	r30, Y+4	; 0x04
    169a:	fd 81       	ldd	r31, Y+5	; 0x05
    169c:	80 83       	st	Z, r24
    169e:	17 c0       	rjmp	.+46     	; 0x16ce <DIO_u8GetPinValue+0x110>
			break;
		case DIO_PORTD :
			*Copy_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
    16a0:	e0 e3       	ldi	r30, 0x30	; 48
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a9 01       	movw	r20, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_u8GetPinValue+0xfa>
    16b4:	55 95       	asr	r21
    16b6:	47 95       	ror	r20
    16b8:	8a 95       	dec	r24
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_u8GetPinValue+0xf6>
    16bc:	ca 01       	movw	r24, r20
    16be:	81 70       	andi	r24, 0x01	; 1
    16c0:	ec 81       	ldd	r30, Y+4	; 0x04
    16c2:	fd 81       	ldd	r31, Y+5	; 0x05
    16c4:	80 83       	st	Z, r24
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <DIO_u8GetPinValue+0x110>
			break;
		default:
			ErrorState=NOK;
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <DIO_u8GetPinValue+0x110>
			break;
		}
	}
	else
	{
		ErrorState=NOK;
    16cc:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d0:	27 96       	adiw	r28, 0x07	; 7
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <EEPROM_Init>:
#include "TWI_Config.h"
#include "TWI_Interface.h"
#include <util/delay.h>

void EEPROM_Init(void)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	TWI_voidInit();
    16ea:	0e 94 22 18 	call	0x3044	; 0x3044 <TWI_voidInit>
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <EEPROM_Write_Byte>:

u8 EEPROM_Write_Byte(u16 address,u8 Copy_u8Data)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <EEPROM_Write_Byte+0x6>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <EEPROM_Write_Byte+0x8>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	6b 83       	std	Y+3, r22	; 0x03
	TWI_voidStartCondition();
    1706:	0e 94 38 18 	call	0x3070	; 0x3070 <TWI_voidStartCondition>
	if(TWI_u8getStatus() != TW_START)
    170a:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    170e:	88 30       	cpi	r24, 0x08	; 8
    1710:	11 f0       	breq	.+4      	; 0x1716 <EEPROM_Write_Byte+0x22>
		return NOK;
    1712:	1c 82       	std	Y+4, r1	; 0x04
    1714:	28 c0       	rjmp	.+80     	; 0x1766 <EEPROM_Write_Byte+0x72>

	/*Write the slave address with write*/
	TWI_voidWrite((u8)(0xA0|((address & 0x0700)>>7)));
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	80 70       	andi	r24, 0x00	; 0
    171c:	97 70       	andi	r25, 0x07	; 7
    171e:	88 0f       	add	r24, r24
    1720:	89 2f       	mov	r24, r25
    1722:	88 1f       	adc	r24, r24
    1724:	99 0b       	sbc	r25, r25
    1726:	91 95       	neg	r25
    1728:	80 6a       	ori	r24, 0xA0	; 160
    172a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <TWI_voidWrite>
	if (TWI_u8getStatus() != TW_MT_SLA_W_ACK)
    172e:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    1732:	88 31       	cpi	r24, 0x18	; 24
    1734:	11 f0       	breq	.+4      	; 0x173a <EEPROM_Write_Byte+0x46>
		return NOK;
    1736:	1c 82       	std	Y+4, r1	; 0x04
    1738:	16 c0       	rjmp	.+44     	; 0x1766 <EEPROM_Write_Byte+0x72>

	/*Send location address*/
	TWI_voidWrite((u8)(address));
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <TWI_voidWrite>
	if(TWI_u8getStatus() != TW_MT_DATA_ACK)
    1740:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    1744:	88 32       	cpi	r24, 0x28	; 40
    1746:	11 f0       	breq	.+4      	; 0x174c <EEPROM_Write_Byte+0x58>
		return NOK;
    1748:	1c 82       	std	Y+4, r1	; 0x04
    174a:	0d c0       	rjmp	.+26     	; 0x1766 <EEPROM_Write_Byte+0x72>

	/*Write byte to EEPROM*/
	TWI_voidWrite(Copy_u8Data);
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <TWI_voidWrite>
	if(TWI_u8getStatus() != TW_MT_DATA_ACK)
    1752:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    1756:	88 32       	cpi	r24, 0x28	; 40
    1758:	11 f0       	breq	.+4      	; 0x175e <EEPROM_Write_Byte+0x6a>
		return NOK;
    175a:	1c 82       	std	Y+4, r1	; 0x04
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <EEPROM_Write_Byte+0x72>

	TWI_voidStopCondition();
    175e:	0e 94 48 18 	call	0x3090	; 0x3090 <TWI_voidStopCondition>
	return OK;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	8c 83       	std	Y+4, r24	; 0x04
    1766:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <EEPROM_Read_Byte>:

u8 EEPROM_Read_Byte(u16 address,u8 *Copy_u8Data)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <EEPROM_Read_Byte+0x6>
    177c:	00 d0       	rcall	.+0      	; 0x177e <EEPROM_Read_Byte+0x8>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	7c 83       	std	Y+4, r23	; 0x04
    178a:	6b 83       	std	Y+3, r22	; 0x03
	TWI_voidStartCondition();
    178c:	0e 94 38 18 	call	0x3070	; 0x3070 <TWI_voidStartCondition>
	if(TWI_u8getStatus() != TW_START)
    1790:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    1794:	88 30       	cpi	r24, 0x08	; 8
    1796:	11 f0       	breq	.+4      	; 0x179c <EEPROM_Read_Byte+0x26>
		return NOK;
    1798:	1d 82       	std	Y+5, r1	; 0x05
    179a:	44 c0       	rjmp	.+136    	; 0x1824 <EEPROM_Read_Byte+0xae>

	/*Write the slave address with write*/
	TWI_voidWrite((u8)(0xA0|((address & 0x0700)>>7)));
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	80 70       	andi	r24, 0x00	; 0
    17a2:	97 70       	andi	r25, 0x07	; 7
    17a4:	88 0f       	add	r24, r24
    17a6:	89 2f       	mov	r24, r25
    17a8:	88 1f       	adc	r24, r24
    17aa:	99 0b       	sbc	r25, r25
    17ac:	91 95       	neg	r25
    17ae:	80 6a       	ori	r24, 0xA0	; 160
    17b0:	0e 94 53 18 	call	0x30a6	; 0x30a6 <TWI_voidWrite>
	if (TWI_u8getStatus() != TW_MT_SLA_W_ACK)
    17b4:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    17b8:	88 31       	cpi	r24, 0x18	; 24
    17ba:	11 f0       	breq	.+4      	; 0x17c0 <EEPROM_Read_Byte+0x4a>
		return NOK;
    17bc:	1d 82       	std	Y+5, r1	; 0x05
    17be:	32 c0       	rjmp	.+100    	; 0x1824 <EEPROM_Read_Byte+0xae>

	/*Send location address*/
	TWI_voidWrite((u8)(address));
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <TWI_voidWrite>
	if(TWI_u8getStatus() != TW_MT_DATA_ACK)
    17c6:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    17ca:	88 32       	cpi	r24, 0x28	; 40
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <EEPROM_Read_Byte+0x5c>
		return NOK;
    17ce:	1d 82       	std	Y+5, r1	; 0x05
    17d0:	29 c0       	rjmp	.+82     	; 0x1824 <EEPROM_Read_Byte+0xae>

	/*Send a repeated start*/
	TWI_voidStartCondition();
    17d2:	0e 94 38 18 	call	0x3070	; 0x3070 <TWI_voidStartCondition>
	if(TWI_u8getStatus() != TW_REP_START)
    17d6:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    17da:	80 31       	cpi	r24, 0x10	; 16
    17dc:	11 f0       	breq	.+4      	; 0x17e2 <EEPROM_Read_Byte+0x6c>
		return NOK;
    17de:	1d 82       	std	Y+5, r1	; 0x05
    17e0:	21 c0       	rjmp	.+66     	; 0x1824 <EEPROM_Read_Byte+0xae>

	/*Write the device address with read*/
	TWI_voidWrite((u8)( 0xA0 | ((address&0x0700)>>7) | 1 ));
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	80 70       	andi	r24, 0x00	; 0
    17e8:	97 70       	andi	r25, 0x07	; 7
    17ea:	88 0f       	add	r24, r24
    17ec:	89 2f       	mov	r24, r25
    17ee:	88 1f       	adc	r24, r24
    17f0:	99 0b       	sbc	r25, r25
    17f2:	91 95       	neg	r25
    17f4:	81 6a       	ori	r24, 0xA1	; 161
    17f6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <TWI_voidWrite>
	if(TWI_u8getStatus() != TW_MT_SLA_R_ACK)
    17fa:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    17fe:	80 34       	cpi	r24, 0x40	; 64
    1800:	11 f0       	breq	.+4      	; 0x1806 <EEPROM_Read_Byte+0x90>
		return NOK;
    1802:	1d 82       	std	Y+5, r1	; 0x05
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <EEPROM_Read_Byte+0xae>

	*Copy_u8Data=TWI_u8ReadWithNAck();
    1806:	0e 94 7d 18 	call	0x30fa	; 0x30fa <TWI_u8ReadWithNAck>
    180a:	eb 81       	ldd	r30, Y+3	; 0x03
    180c:	fc 81       	ldd	r31, Y+4	; 0x04
    180e:	80 83       	st	Z, r24
	if(TWI_u8getStatus() != TW_MR_DATA_NACK)
    1810:	0e 94 90 18 	call	0x3120	; 0x3120 <TWI_u8getStatus>
    1814:	88 35       	cpi	r24, 0x58	; 88
    1816:	11 f0       	breq	.+4      	; 0x181c <EEPROM_Read_Byte+0xa6>
		return NOK;
    1818:	1d 82       	std	Y+5, r1	; 0x05
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <EEPROM_Read_Byte+0xae>

	TWI_voidStopCondition();
    181c:	0e 94 48 18 	call	0x3090	; 0x3090 <TWI_voidStopCondition>
	return OK;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <EXTI_voidINT0_Init>:
void (*CallBackFun0)(void);
void (*CallBackFun1)(void);
void (*CallBackFun2)(void);

void EXTI_voidINT0_Init(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
	/*select Sense Control (Falling edge)*/
	SET_BIT(MCUCR,1);
    183e:	a5 e5       	ldi	r26, 0x55	; 85
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e5       	ldi	r30, 0x55	; 85
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	82 60       	ori	r24, 0x02	; 2
    184a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
    184c:	a5 e5       	ldi	r26, 0x55	; 85
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e5       	ldi	r30, 0x55	; 85
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8e 7f       	andi	r24, 0xFE	; 254
    1858:	8c 93       	st	X, r24
	/*Enable PIE INT0*/
	SET_BIT(GICR,6);
    185a:	ab e5       	ldi	r26, 0x5B	; 91
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	eb e5       	ldi	r30, 0x5B	; 91
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 64       	ori	r24, 0x40	; 64
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <EXTI_voidINT1_Init>:
void EXTI_voidINT1_Init(void)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	/*select Sense Control (Rising edge)*/
	SET_BIT(MCUCR,2);
    1876:	a5 e5       	ldi	r26, 0x55	; 85
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e5 e5       	ldi	r30, 0x55	; 85
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	84 60       	ori	r24, 0x04	; 4
    1882:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    1884:	a5 e5       	ldi	r26, 0x55	; 85
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e5       	ldi	r30, 0x55	; 85
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	88 60       	ori	r24, 0x08	; 8
    1890:	8c 93       	st	X, r24
	/*Enable PIE INT1*/
	SET_BIT(GICR,7);
    1892:	ab e5       	ldi	r26, 0x5B	; 91
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	eb e5       	ldi	r30, 0x5B	; 91
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	8c 93       	st	X, r24
}
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <EXTI_voidINT2_Init>:
void EXTI_voidINT2_Init(void)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
	/*select Sense Control (Falling edge)*/
	CLR_BIT(MCUCSR,6); //MCUCSR
    18ae:	a4 e5       	ldi	r26, 0x54	; 84
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e4 e5       	ldi	r30, 0x54	; 84
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	8f 7b       	andi	r24, 0xBF	; 191
    18ba:	8c 93       	st	X, r24
	/*Enable PIE INT2*/
	SET_BIT(GICR,5);
    18bc:	ab e5       	ldi	r26, 0x5B	; 91
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	eb e5       	ldi	r30, 0x5B	; 91
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 62       	ori	r24, 0x20	; 32
    18c8:	8c 93       	st	X, r24
}
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <EXTI_voidSet_SenseControl>:

void EXTI_voidSet_SenseControl(u8 Copy_u8SenseControl)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <EXTI_voidSet_SenseControl+0x6>
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	3b 83       	std	Y+3, r19	; 0x03
    18e6:	2a 83       	std	Y+2, r18	; 0x02
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	9b 81       	ldd	r25, Y+3	; 0x03
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	21 f1       	breq	.+72     	; 0x193a <EXTI_voidSet_SenseControl+0x6a>
    18f2:	2a 81       	ldd	r18, Y+2	; 0x02
    18f4:	3b 81       	ldd	r19, Y+3	; 0x03
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	2c f4       	brge	.+10     	; 0x1906 <EXTI_voidSet_SenseControl+0x36>
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	61 f0       	breq	.+24     	; 0x191c <EXTI_voidSet_SenseControl+0x4c>
    1904:	46 c0       	rjmp	.+140    	; 0x1992 <EXTI_voidSet_SenseControl+0xc2>
    1906:	2a 81       	ldd	r18, Y+2	; 0x02
    1908:	3b 81       	ldd	r19, Y+3	; 0x03
    190a:	22 30       	cpi	r18, 0x02	; 2
    190c:	31 05       	cpc	r19, r1
    190e:	21 f1       	breq	.+72     	; 0x1958 <EXTI_voidSet_SenseControl+0x88>
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	83 30       	cpi	r24, 0x03	; 3
    1916:	91 05       	cpc	r25, r1
    1918:	71 f1       	breq	.+92     	; 0x1976 <EXTI_voidSet_SenseControl+0xa6>
    191a:	3b c0       	rjmp	.+118    	; 0x1992 <EXTI_voidSet_SenseControl+0xc2>
	{
	case EXTI_FALLING_EDGE:
		SET_BIT(MCUCR,1);
    191c:	a5 e5       	ldi	r26, 0x55	; 85
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e5 e5       	ldi	r30, 0x55	; 85
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	82 60       	ori	r24, 0x02	; 2
    1928:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,0);
    192a:	a5 e5       	ldi	r26, 0x55	; 85
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e5       	ldi	r30, 0x55	; 85
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8e 7f       	andi	r24, 0xFE	; 254
    1936:	8c 93       	st	X, r24
    1938:	2c c0       	rjmp	.+88     	; 0x1992 <EXTI_voidSet_SenseControl+0xc2>
		break;

	case EXTI_RISING_EDGE:
		SET_BIT(MCUCR,2);
    193a:	a5 e5       	ldi	r26, 0x55	; 85
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e5       	ldi	r30, 0x55	; 85
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	84 60       	ori	r24, 0x04	; 4
    1946:	8c 93       	st	X, r24
		SET_BIT(MCUCR,3);
    1948:	a5 e5       	ldi	r26, 0x55	; 85
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e5 e5       	ldi	r30, 0x55	; 85
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	88 60       	ori	r24, 0x08	; 8
    1954:	8c 93       	st	X, r24
    1956:	1d c0       	rjmp	.+58     	; 0x1992 <EXTI_voidSet_SenseControl+0xc2>
		break;

	case EXTI_ANY_LOGICAL_CHANGE:
		CLR_BIT(MCUCR,1);
    1958:	a5 e5       	ldi	r26, 0x55	; 85
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e5       	ldi	r30, 0x55	; 85
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8d 7f       	andi	r24, 0xFD	; 253
    1964:	8c 93       	st	X, r24
		SET_BIT(MCUCR,3);
    1966:	a5 e5       	ldi	r26, 0x55	; 85
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e5 e5       	ldi	r30, 0x55	; 85
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	88 60       	ori	r24, 0x08	; 8
    1972:	8c 93       	st	X, r24
    1974:	0e c0       	rjmp	.+28     	; 0x1992 <EXTI_voidSet_SenseControl+0xc2>
		break;

	case EXTI_LOW_LEVEL:
		CLR_BIT(MCUCR,1);
    1976:	a5 e5       	ldi	r26, 0x55	; 85
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e5 e5       	ldi	r30, 0x55	; 85
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8d 7f       	andi	r24, 0xFD	; 253
    1982:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,0);
    1984:	a5 e5       	ldi	r26, 0x55	; 85
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e5 e5       	ldi	r30, 0x55	; 85
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8e 7f       	andi	r24, 0xFE	; 254
    1990:	8c 93       	st	X, r24
		break;
	default:
		break;

	}
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <EXT0_voidSet_CallBackFunction>:

void EXT0_voidSet_CallBackFunction(void(*Copy_voidP_CallBackFun)(void))
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <EXT0_voidSet_CallBackFunction+0x6>
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
	CallBackFun0=Copy_voidP_CallBackFun;
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	90 93 7f 01 	sts	0x017F, r25
    19b4:	80 93 7e 01 	sts	0x017E, r24
}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <EXT1_voidSet_CallBackFunction>:
void EXT1_voidSet_CallBackFunction(void(*Copy_voidP_CallBackFun)(void))
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <EXT1_voidSet_CallBackFunction+0x6>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
	CallBackFun1=Copy_voidP_CallBackFun;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	90 93 81 01 	sts	0x0181, r25
    19d8:	80 93 80 01 	sts	0x0180, r24
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <EXT2_voidSet_CallBackFunction>:
void EXT2_voidSet_CallBackFunction(void(*Copy_voidP_CallBackFun)(void))
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <EXT2_voidSet_CallBackFunction+0x6>
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
	CallBackFun2=Copy_voidP_CallBackFun;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	90 93 7d 01 	sts	0x017D, r25
    19fc:	80 93 7c 01 	sts	0x017C, r24
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	2f 93       	push	r18
    1a16:	3f 93       	push	r19
    1a18:	4f 93       	push	r20
    1a1a:	5f 93       	push	r21
    1a1c:	6f 93       	push	r22
    1a1e:	7f 93       	push	r23
    1a20:	8f 93       	push	r24
    1a22:	9f 93       	push	r25
    1a24:	af 93       	push	r26
    1a26:	bf 93       	push	r27
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	CallBackFun0();
    1a34:	e0 91 7e 01 	lds	r30, 0x017E
    1a38:	f0 91 7f 01 	lds	r31, 0x017F
    1a3c:	09 95       	icall
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	2f 93       	push	r18
    1a70:	3f 93       	push	r19
    1a72:	4f 93       	push	r20
    1a74:	5f 93       	push	r21
    1a76:	6f 93       	push	r22
    1a78:	7f 93       	push	r23
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	af 93       	push	r26
    1a80:	bf 93       	push	r27
    1a82:	ef 93       	push	r30
    1a84:	ff 93       	push	r31
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
	CallBackFun1();
    1a8e:	e0 91 80 01 	lds	r30, 0x0180
    1a92:	f0 91 81 01 	lds	r31, 0x0181
    1a96:	09 95       	icall
}
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	ff 91       	pop	r31
    1a9e:	ef 91       	pop	r30
    1aa0:	bf 91       	pop	r27
    1aa2:	af 91       	pop	r26
    1aa4:	9f 91       	pop	r25
    1aa6:	8f 91       	pop	r24
    1aa8:	7f 91       	pop	r23
    1aaa:	6f 91       	pop	r22
    1aac:	5f 91       	pop	r21
    1aae:	4f 91       	pop	r20
    1ab0:	3f 91       	pop	r19
    1ab2:	2f 91       	pop	r18
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
	CallBackFun2();
    1ae8:	e0 91 7c 01 	lds	r30, 0x017C
    1aec:	f0 91 7d 01 	lds	r31, 0x017D
    1af0:	09 95       	icall
}
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0f 90       	pop	r0
    1b14:	1f 90       	pop	r1
    1b16:	18 95       	reti

00001b18 <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"GIE_Private.h"

void GIE_voidEnable(void)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global interrupt */
	SET_BIT(SREG,7);
    1b20:	af e5       	ldi	r26, 0x5F	; 95
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	ef e5       	ldi	r30, 0x5F	; 95
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 68       	ori	r24, 0x80	; 128
    1b2c:	8c 93       	st	X, r24
}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	/*Disable Global interrupt */
	CLR_BIT(SREG,7);
    1b3c:	af e5       	ldi	r26, 0x5F	; 95
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	ef e5       	ldi	r30, 0x5F	; 95
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8f 77       	andi	r24, 0x7F	; 127
    1b48:	8c 93       	st	X, r24
}
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <INC_5_BUTTON>:
#include "DIO_Private.h"
#include<util/delay.h>


u8 INC_5_BUTTON(u8 Copy_u8LastValue)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <INC_5_BUTTON+0x6>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 NewNumber = 5;
    1b5c:	85 e0       	ldi	r24, 0x05	; 5
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8LastValue > 0 && Copy_u8LastValue < 95)
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	88 23       	and	r24, r24
    1b64:	31 f0       	breq	.+12     	; 0x1b72 <INC_5_BUTTON+0x22>
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	8f 35       	cpi	r24, 0x5F	; 95
    1b6a:	18 f4       	brcc	.+6      	; 0x1b72 <INC_5_BUTTON+0x22>
	{
		NewNumber = Copy_u8LastValue+5;
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	8b 5f       	subi	r24, 0xFB	; 251
    1b70:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//nothing
	}

	return NewNumber;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <DEC_5_BUTTON>:
u8 DEC_5_BUTTON(u8 Copy_u8LastValue)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <DEC_5_BUTTON+0x6>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	8a 83       	std	Y+2, r24	; 0x02
	u8 NewNumber = 99;
    1b8a:	83 e6       	ldi	r24, 0x63	; 99
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8LastValue >=5 && Copy_u8LastValue <= 99)
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	85 30       	cpi	r24, 0x05	; 5
    1b92:	30 f0       	brcs	.+12     	; 0x1ba0 <DEC_5_BUTTON+0x22>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	84 36       	cpi	r24, 0x64	; 100
    1b98:	18 f4       	brcc	.+6      	; 0x1ba0 <DEC_5_BUTTON+0x22>
	{
		NewNumber = Copy_u8LastValue-5;
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	85 50       	subi	r24, 0x05	; 5
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//nothing
	}
	return NewNumber;
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <project_init>:




void project_init (void)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	//BUTTON INITIALISATION
	DIO_u8SetPinDirection(DIO_PIN5 , DIO_PORTD , PIN_INPUT);
    1bb4:	85 e0       	ldi	r24, 0x05	; 5
    1bb6:	63 e0       	ldi	r22, 0x03	; 3
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN6 , DIO_PORTD , PIN_INPUT);
    1bbe:	86 e0       	ldi	r24, 0x06	; 6
    1bc0:	63 e0       	ldi	r22, 0x03	; 3
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>

	//PULLUP BUTTONS
	DIO_u8SetPinValue(DIO_PIN5 , DIO_PORTD , PIN_HIGH);
    1bc8:	85 e0       	ldi	r24, 0x05	; 5
    1bca:	63 e0       	ldi	r22, 0x03	; 3
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PIN6 , DIO_PORTD , PIN_HIGH);
    1bd2:	86 e0       	ldi	r24, 0x06	; 6
    1bd4:	63 e0       	ldi	r22, 0x03	; 3
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PIN2 , DIO_PORTB , PIN_HIGH);
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	41 e0       	ldi	r20, 0x01	; 1
    1be2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>

	//Set EXT0 PIN as an interrupt
	DIO_u8SetPinDirection(DIO_PIN2 , DIO_PORTD , PIN_INPUT);
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	63 e0       	ldi	r22, 0x03	; 3
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	EXT0_voidSet_CallBackFunction(&UP_Button);
    1bf0:	85 ef       	ldi	r24, 0xF5	; 245
    1bf2:	93 e1       	ldi	r25, 0x13	; 19
    1bf4:	0e 94 cf 0c 	call	0x199e	; 0x199e <EXT0_voidSet_CallBackFunction>
	EXTI_voidINT0_Init();
    1bf8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <EXTI_voidINT0_Init>

	//Set EXT1 PIN as an interrupt
	DIO_u8SetPinDirection(DIO_PIN3 , DIO_PORTD , PIN_INPUT);
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	63 e0       	ldi	r22, 0x03	; 3
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	EXT1_voidSet_CallBackFunction(&DOWN_Button);
    1c06:	89 e1       	ldi	r24, 0x19	; 25
    1c08:	94 e1       	ldi	r25, 0x14	; 20
    1c0a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <EXT1_voidSet_CallBackFunction>
	EXTI_voidINT1_Init();
    1c0e:	0e 94 37 0c 	call	0x186e	; 0x186e <EXTI_voidINT1_Init>

	//Set EXT2 PIN as an interrupt
	DIO_u8SetPinDirection(DIO_PIN2 , DIO_PORTB , PIN_INPUT);
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	EXT2_voidSet_CallBackFunction(&Button_APP);
    1c1c:	86 eb       	ldi	r24, 0xB6	; 182
    1c1e:	93 e1       	ldi	r25, 0x13	; 19
    1c20:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <EXT2_voidSet_CallBackFunction>
	EXTI_voidINT2_Init();
    1c24:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <EXTI_voidINT2_Init>

	//EEPROM AND TWI
//	EEPROM_Init();

	//LED
	DIO_u8SetPinDirection(DIO_PIN7 , DIO_PORTC , PIN_OUTPUT);
    1c28:	87 e0       	ldi	r24, 0x07	; 7
    1c2a:	62 e0       	ldi	r22, 0x02	; 2
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_PIN7 , DIO_PORTC , PIN_LOW);
    1c32:	87 e0       	ldi	r24, 0x07	; 7
    1c34:	62 e0       	ldi	r22, 0x02	; 2
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
	DIO_u8SetPinDirection(DIO_PIN2 , DIO_PORTC , PIN_OUTPUT);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_PIN2 , DIO_PORTC , PIN_LOW);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>

	//fan
	DIO_u8SetPinDirection(DIO_PIN1 , DIO_PORTA , PIN_OUTPUT);
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>

	//heater
	DIO_u8SetPinDirection(DIO_PIN4 , DIO_PORTD , PIN_OUTPUT);
    1c5a:	84 e0       	ldi	r24, 0x04	; 4
    1c5c:	63 e0       	ldi	r22, 0x03	; 3
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>

	//init test LED
	DIO_u8SetPinDirection(DIO_PIN4,DIO_PORTB,PIN_OUTPUT);
    1c64:	84 e0       	ldi	r24, 0x04	; 4
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>

	//Enable timer led
	DIO_u8SetPinDirection(DIO_PIN5,DIO_PORTD,PIN_OUTPUT);
    1c6e:	85 e0       	ldi	r24, 0x05	; 5
    1c70:	63 e0       	ldi	r22, 0x03	; 3
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>

	SevenSegment_INIT();
    1c78:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <SevenSegment_INIT>

	//Timer0 Initialisation
	//TIMER0_voidSet_CallBackFunction(&Temp_Setting_Mode);
	TIMER0_voidSetCTCValue(100);
    1c7c:	84 e6       	ldi	r24, 0x64	; 100
    1c7e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <TIMER0_voidSetCTCValue>
	TIMER0_voidInit();
    1c82:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <TIMER0_voidInit>

	//Timer1 Initialisation
	TIMER1_voidCallBackFunction(&Timer1_Interrupt_Function);
    1c86:	88 ed       	ldi	r24, 0xD8	; 216
    1c88:	94 e1       	ldi	r25, 0x14	; 20
    1c8a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <TIMER1_voidCallBackFunction>
	TIMER1_voidSetOCR1AValue(150);
    1c8e:	86 e9       	ldi	r24, 0x96	; 150
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <TIMER1_voidSetOCR1AValue>
	TIMER1_voidInit();
    1c96:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <TIMER1_voidInit>

	//ADC Initialisation
	ADC_voidSet_CallBackFunction(&ADC_SensorTemperature);
    1c9a:	8d e3       	ldi	r24, 0x3D	; 61
    1c9c:	94 e1       	ldi	r25, 0x14	; 20
    1c9e:	0e 94 0c 08 	call	0x1018	; 0x1018 <ADC_voidSet_CallBackFunction>
	ADC_voidInit_Interrupt();
    1ca2:	0e 94 83 07 	call	0xf06	; 0xf06 <ADC_voidInit_Interrupt>

	//ENABLE GLOBAL INTERRUPT
	GIE_voidEnable();
    1ca6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <GIE_voidEnable>

}
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <Temp_Setting_Mode>:

void Temp_Setting_Mode(void)
{
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	c3 56       	subi	r28, 0x63	; 99
    1cbe:	d0 40       	sbci	r29, 0x00	; 0
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
	u8 de7k = SetTemp;
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ed 59       	subi	r30, 0x9D	; 157
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 91 68 01 	lds	r24, 0x0168
    1cd4:	80 83       	st	Z, r24
	ADC_INTERRUPT_DISABLE();
    1cd6:	0e 94 c2 07 	call	0xf84	; 0xf84 <ADC_INTERRUPT_DISABLE>
	Send_Number(de7k);
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ed 59       	subi	r30, 0x9D	; 157
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 81       	ld	r24, Z
    1ce2:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
	SevenSegment_OFF();
    1ce6:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SevenSegment_OFF>
    1cea:	fe 01       	movw	r30, r28
    1cec:	e1 5a       	subi	r30, 0xA1	; 161
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	aa ef       	ldi	r26, 0xFA	; 250
    1cf6:	b3 e4       	ldi	r27, 0x43	; 67
    1cf8:	80 83       	st	Z, r24
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	a2 83       	std	Z+2, r26	; 0x02
    1cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d00:	8e 01       	movw	r16, r28
    1d02:	05 5a       	subi	r16, 0xA5	; 165
    1d04:	1f 4f       	sbci	r17, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	e1 5a       	subi	r30, 0xA1	; 161
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a e7       	ldi	r20, 0x7A	; 122
    1d1a:	53 e4       	ldi	r21, 0x43	; 67
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	f8 01       	movw	r30, r16
    1d26:	80 83       	st	Z, r24
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	a2 83       	std	Z+2, r26	; 0x02
    1d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e5 5a       	subi	r30, 0xA5	; 165
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	44 f4       	brge	.+16     	; 0x1d5c <Temp_Setting_Mode+0xac>
		__ticks = 1;
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e7 5a       	subi	r30, 0xA7	; 167
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
    1d5a:	64 c0       	rjmp	.+200    	; 0x1e24 <Temp_Setting_Mode+0x174>
	else if (__tmp > 65535)
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e5 5a       	subi	r30, 0xA5	; 165
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <Temp_Setting_Mode+0xcc>
    1d7a:	43 c0       	rjmp	.+134    	; 0x1e02 <Temp_Setting_Mode+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e1 5a       	subi	r30, 0xA1	; 161
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	07 5a       	subi	r16, 0xA7	; 167
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	f8 01       	movw	r30, r16
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	1f c0       	rjmp	.+62     	; 0x1df2 <Temp_Setting_Mode+0x142>
    1db4:	fe 01       	movw	r30, r28
    1db6:	e9 5a       	subi	r30, 0xA9	; 169
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	89 e1       	ldi	r24, 0x19	; 25
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e9 5a       	subi	r30, 0xA9	; 169
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <Temp_Setting_Mode+0x11c>
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e9 5a       	subi	r30, 0xA9	; 169
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dda:	de 01       	movw	r26, r28
    1ddc:	a7 5a       	subi	r26, 0xA7	; 167
    1dde:	bf 4f       	sbci	r27, 0xFF	; 255
    1de0:	fe 01       	movw	r30, r28
    1de2:	e7 5a       	subi	r30, 0xA7	; 167
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	9c 93       	st	X, r25
    1df0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	fe 01       	movw	r30, r28
    1df4:	e7 5a       	subi	r30, 0xA7	; 167
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	d1 f6       	brne	.-76     	; 0x1db4 <Temp_Setting_Mode+0x104>
    1e00:	27 c0       	rjmp	.+78     	; 0x1e50 <Temp_Setting_Mode+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	8e 01       	movw	r16, r28
    1e04:	07 5a       	subi	r16, 0xA7	; 167
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e5 5a       	subi	r30, 0xA5	; 165
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	de 01       	movw	r26, r28
    1e26:	ab 5a       	subi	r26, 0xAB	; 171
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e7 5a       	subi	r30, 0xA7	; 167
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	8d 93       	st	X+, r24
    1e36:	9c 93       	st	X, r25
    1e38:	fe 01       	movw	r30, r28
    1e3a:	eb 5a       	subi	r30, 0xAB	; 171
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <Temp_Setting_Mode+0x192>
    1e46:	fe 01       	movw	r30, r28
    1e48:	eb 5a       	subi	r30, 0xAB	; 171
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
	_delay_ms(500);

	Send_Number(de7k);
    1e50:	fe 01       	movw	r30, r28
    1e52:	ed 59       	subi	r30, 0x9D	; 157
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ef 5a       	subi	r30, 0xAF	; 175
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	aa ef       	ldi	r26, 0xFA	; 250
    1e68:	b3 e4       	ldi	r27, 0x43	; 67
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	8e 01       	movw	r16, r28
    1e74:	03 5b       	subi	r16, 0xB3	; 179
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ef 5a       	subi	r30, 0xAF	; 175
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a e7       	ldi	r20, 0x7A	; 122
    1e8c:	53 e4       	ldi	r21, 0x43	; 67
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e3 5b       	subi	r30, 0xB3	; 179
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	44 f4       	brge	.+16     	; 0x1ece <Temp_Setting_Mode+0x21e>
		__ticks = 1;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e5 5b       	subi	r30, 0xB5	; 181
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
    1ecc:	64 c0       	rjmp	.+200    	; 0x1f96 <Temp_Setting_Mode+0x2e6>
	else if (__tmp > 65535)
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e3 5b       	subi	r30, 0xB3	; 179
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	3f ef       	ldi	r19, 0xFF	; 255
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	0c f0       	brlt	.+2      	; 0x1eee <Temp_Setting_Mode+0x23e>
    1eec:	43 c0       	rjmp	.+134    	; 0x1f74 <Temp_Setting_Mode+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ef 5a       	subi	r30, 0xAF	; 175
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	05 5b       	subi	r16, 0xB5	; 181
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	1f c0       	rjmp	.+62     	; 0x1f64 <Temp_Setting_Mode+0x2b4>
    1f26:	fe 01       	movw	r30, r28
    1f28:	e7 5b       	subi	r30, 0xB7	; 183
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	89 e1       	ldi	r24, 0x19	; 25
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	fe 01       	movw	r30, r28
    1f36:	e7 5b       	subi	r30, 0xB7	; 183
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	91 81       	ldd	r25, Z+1	; 0x01
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <Temp_Setting_Mode+0x28e>
    1f42:	fe 01       	movw	r30, r28
    1f44:	e7 5b       	subi	r30, 0xB7	; 183
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	de 01       	movw	r26, r28
    1f4e:	a5 5b       	subi	r26, 0xB5	; 181
    1f50:	bf 4f       	sbci	r27, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	e5 5b       	subi	r30, 0xB5	; 181
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	9c 93       	st	X, r25
    1f62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	fe 01       	movw	r30, r28
    1f66:	e5 5b       	subi	r30, 0xB5	; 181
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	d1 f6       	brne	.-76     	; 0x1f26 <Temp_Setting_Mode+0x276>
    1f72:	27 c0       	rjmp	.+78     	; 0x1fc2 <Temp_Setting_Mode+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	8e 01       	movw	r16, r28
    1f76:	05 5b       	subi	r16, 0xB5	; 181
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e3 5b       	subi	r30, 0xB3	; 179
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	f8 01       	movw	r30, r16
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	de 01       	movw	r26, r28
    1f98:	a9 5b       	subi	r26, 0xB9	; 185
    1f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e5 5b       	subi	r30, 0xB5	; 181
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	8d 93       	st	X+, r24
    1fa8:	9c 93       	st	X, r25
    1faa:	fe 01       	movw	r30, r28
    1fac:	e9 5b       	subi	r30, 0xB9	; 185
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <Temp_Setting_Mode+0x304>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e9 5b       	subi	r30, 0xB9	; 185
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
	_delay_ms(500);
	SevenSegment_OFF();
    1fc2:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SevenSegment_OFF>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ed 5b       	subi	r30, 0xBD	; 189
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	aa ef       	ldi	r26, 0xFA	; 250
    1fd2:	b3 e4       	ldi	r27, 0x43	; 67
    1fd4:	80 83       	st	Z, r24
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	a2 83       	std	Z+2, r26	; 0x02
    1fda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	8e 01       	movw	r16, r28
    1fde:	01 5c       	subi	r16, 0xC1	; 193
    1fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ed 5b       	subi	r30, 0xBD	; 189
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a e7       	ldi	r20, 0x7A	; 122
    1ff6:	53 e4       	ldi	r21, 0x43	; 67
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    200a:	fe 01       	movw	r30, r28
    200c:	ff 96       	adiw	r30, 0x3f	; 63
    200e:	60 81       	ld	r22, Z
    2010:	71 81       	ldd	r23, Z+1	; 0x01
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <Temp_Setting_Mode+0x380>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9e af       	std	Y+62, r25	; 0x3e
    202c:	8d af       	std	Y+61, r24	; 0x3d
    202e:	46 c0       	rjmp	.+140    	; 0x20bc <Temp_Setting_Mode+0x40c>
	else if (__tmp > 65535)
    2030:	fe 01       	movw	r30, r28
    2032:	ff 96       	adiw	r30, 0x3f	; 63
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	3f ef       	ldi	r19, 0xFF	; 255
    2040:	4f e7       	ldi	r20, 0x7F	; 127
    2042:	57 e4       	ldi	r21, 0x47	; 71
    2044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2048:	18 16       	cp	r1, r24
    204a:	64 f5       	brge	.+88     	; 0x20a4 <Temp_Setting_Mode+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	fe 01       	movw	r30, r28
    204e:	ed 5b       	subi	r30, 0xBD	; 189
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9e af       	std	Y+62, r25	; 0x3e
    2078:	8d af       	std	Y+61, r24	; 0x3d
    207a:	0f c0       	rjmp	.+30     	; 0x209a <Temp_Setting_Mode+0x3ea>
    207c:	89 e1       	ldi	r24, 0x19	; 25
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c af       	std	Y+60, r25	; 0x3c
    2082:	8b af       	std	Y+59, r24	; 0x3b
    2084:	8b ad       	ldd	r24, Y+59	; 0x3b
    2086:	9c ad       	ldd	r25, Y+60	; 0x3c
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <Temp_Setting_Mode+0x3d8>
    208c:	9c af       	std	Y+60, r25	; 0x3c
    208e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	8d ad       	ldd	r24, Y+61	; 0x3d
    2092:	9e ad       	ldd	r25, Y+62	; 0x3e
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9e af       	std	Y+62, r25	; 0x3e
    2098:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	8d ad       	ldd	r24, Y+61	; 0x3d
    209c:	9e ad       	ldd	r25, Y+62	; 0x3e
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	69 f7       	brne	.-38     	; 0x207c <Temp_Setting_Mode+0x3cc>
    20a2:	16 c0       	rjmp	.+44     	; 0x20d0 <Temp_Setting_Mode+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	fe 01       	movw	r30, r28
    20a6:	ff 96       	adiw	r30, 0x3f	; 63
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9e af       	std	Y+62, r25	; 0x3e
    20ba:	8d af       	std	Y+61, r24	; 0x3d
    20bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    20be:	9e ad       	ldd	r25, Y+62	; 0x3e
    20c0:	9a af       	std	Y+58, r25	; 0x3a
    20c2:	89 af       	std	Y+57, r24	; 0x39
    20c4:	89 ad       	ldd	r24, Y+57	; 0x39
    20c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <Temp_Setting_Mode+0x418>
    20cc:	9a af       	std	Y+58, r25	; 0x3a
    20ce:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);

	Send_Number(de7k);
    20d0:	fe 01       	movw	r30, r28
    20d2:	ed 59       	subi	r30, 0x9D	; 157
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	aa ef       	ldi	r26, 0xFA	; 250
    20e2:	b3 e4       	ldi	r27, 0x43	; 67
    20e4:	8d ab       	std	Y+53, r24	; 0x35
    20e6:	9e ab       	std	Y+54, r25	; 0x36
    20e8:	af ab       	std	Y+55, r26	; 0x37
    20ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6d a9       	ldd	r22, Y+53	; 0x35
    20ee:	7e a9       	ldd	r23, Y+54	; 0x36
    20f0:	8f a9       	ldd	r24, Y+55	; 0x37
    20f2:	98 ad       	ldd	r25, Y+56	; 0x38
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a e7       	ldi	r20, 0x7A	; 122
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	89 ab       	std	Y+49, r24	; 0x31
    2106:	9a ab       	std	Y+50, r25	; 0x32
    2108:	ab ab       	std	Y+51, r26	; 0x33
    210a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    210c:	69 a9       	ldd	r22, Y+49	; 0x31
    210e:	7a a9       	ldd	r23, Y+50	; 0x32
    2110:	8b a9       	ldd	r24, Y+51	; 0x33
    2112:	9c a9       	ldd	r25, Y+52	; 0x34
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <Temp_Setting_Mode+0x47e>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <Temp_Setting_Mode+0x4fc>
	else if (__tmp > 65535)
    212e:	69 a9       	ldd	r22, Y+49	; 0x31
    2130:	7a a9       	ldd	r23, Y+50	; 0x32
    2132:	8b a9       	ldd	r24, Y+51	; 0x33
    2134:	9c a9       	ldd	r25, Y+52	; 0x34
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <Temp_Setting_Mode+0x4e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6d a9       	ldd	r22, Y+53	; 0x35
    2148:	7e a9       	ldd	r23, Y+54	; 0x36
    214a:	8f a9       	ldd	r24, Y+55	; 0x37
    214c:	98 ad       	ldd	r25, Y+56	; 0x38
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	98 ab       	std	Y+48, r25	; 0x30
    216c:	8f a7       	std	Y+47, r24	; 0x2f
    216e:	0f c0       	rjmp	.+30     	; 0x218e <Temp_Setting_Mode+0x4de>
    2170:	89 e1       	ldi	r24, 0x19	; 25
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9e a7       	std	Y+46, r25	; 0x2e
    2176:	8d a7       	std	Y+45, r24	; 0x2d
    2178:	8d a5       	ldd	r24, Y+45	; 0x2d
    217a:	9e a5       	ldd	r25, Y+46	; 0x2e
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <Temp_Setting_Mode+0x4cc>
    2180:	9e a7       	std	Y+46, r25	; 0x2e
    2182:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8f a5       	ldd	r24, Y+47	; 0x2f
    2186:	98 a9       	ldd	r25, Y+48	; 0x30
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	98 ab       	std	Y+48, r25	; 0x30
    218c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2190:	98 a9       	ldd	r25, Y+48	; 0x30
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <Temp_Setting_Mode+0x4c0>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <Temp_Setting_Mode+0x510>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	69 a9       	ldd	r22, Y+49	; 0x31
    219a:	7a a9       	ldd	r23, Y+50	; 0x32
    219c:	8b a9       	ldd	r24, Y+51	; 0x33
    219e:	9c a9       	ldd	r25, Y+52	; 0x34
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	98 ab       	std	Y+48, r25	; 0x30
    21aa:	8f a7       	std	Y+47, r24	; 0x2f
    21ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ae:	98 a9       	ldd	r25, Y+48	; 0x30
    21b0:	9c a7       	std	Y+44, r25	; 0x2c
    21b2:	8b a7       	std	Y+43, r24	; 0x2b
    21b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <Temp_Setting_Mode+0x508>
    21bc:	9c a7       	std	Y+44, r25	; 0x2c
    21be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	SevenSegment_OFF();
    21c0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SevenSegment_OFF>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	aa ef       	ldi	r26, 0xFA	; 250
    21ca:	b3 e4       	ldi	r27, 0x43	; 67
    21cc:	8f a3       	std	Y+39, r24	; 0x27
    21ce:	98 a7       	std	Y+40, r25	; 0x28
    21d0:	a9 a7       	std	Y+41, r26	; 0x29
    21d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	6f a1       	ldd	r22, Y+39	; 0x27
    21d6:	78 a5       	ldd	r23, Y+40	; 0x28
    21d8:	89 a5       	ldd	r24, Y+41	; 0x29
    21da:	9a a5       	ldd	r25, Y+42	; 0x2a
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a e7       	ldi	r20, 0x7A	; 122
    21e2:	53 e4       	ldi	r21, 0x43	; 67
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8b a3       	std	Y+35, r24	; 0x23
    21ee:	9c a3       	std	Y+36, r25	; 0x24
    21f0:	ad a3       	std	Y+37, r26	; 0x25
    21f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21f4:	6b a1       	ldd	r22, Y+35	; 0x23
    21f6:	7c a1       	ldd	r23, Y+36	; 0x24
    21f8:	8d a1       	ldd	r24, Y+37	; 0x25
    21fa:	9e a1       	ldd	r25, Y+38	; 0x26
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	2c f4       	brge	.+10     	; 0x2216 <Temp_Setting_Mode+0x566>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9a a3       	std	Y+34, r25	; 0x22
    2212:	89 a3       	std	Y+33, r24	; 0x21
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <Temp_Setting_Mode+0x5e4>
	else if (__tmp > 65535)
    2216:	6b a1       	ldd	r22, Y+35	; 0x23
    2218:	7c a1       	ldd	r23, Y+36	; 0x24
    221a:	8d a1       	ldd	r24, Y+37	; 0x25
    221c:	9e a1       	ldd	r25, Y+38	; 0x26
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	4c f5       	brge	.+82     	; 0x2280 <Temp_Setting_Mode+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	6f a1       	ldd	r22, Y+39	; 0x27
    2230:	78 a5       	ldd	r23, Y+40	; 0x28
    2232:	89 a5       	ldd	r24, Y+41	; 0x29
    2234:	9a a5       	ldd	r25, Y+42	; 0x2a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9a a3       	std	Y+34, r25	; 0x22
    2254:	89 a3       	std	Y+33, r24	; 0x21
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <Temp_Setting_Mode+0x5c6>
    2258:	89 e1       	ldi	r24, 0x19	; 25
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	98 a3       	std	Y+32, r25	; 0x20
    225e:	8f 8f       	std	Y+31, r24	; 0x1f
    2260:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2262:	98 a1       	ldd	r25, Y+32	; 0x20
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <Temp_Setting_Mode+0x5b4>
    2268:	98 a3       	std	Y+32, r25	; 0x20
    226a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	89 a1       	ldd	r24, Y+33	; 0x21
    226e:	9a a1       	ldd	r25, Y+34	; 0x22
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9a a3       	std	Y+34, r25	; 0x22
    2274:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	89 a1       	ldd	r24, Y+33	; 0x21
    2278:	9a a1       	ldd	r25, Y+34	; 0x22
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	69 f7       	brne	.-38     	; 0x2258 <Temp_Setting_Mode+0x5a8>
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <Temp_Setting_Mode+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	6b a1       	ldd	r22, Y+35	; 0x23
    2282:	7c a1       	ldd	r23, Y+36	; 0x24
    2284:	8d a1       	ldd	r24, Y+37	; 0x25
    2286:	9e a1       	ldd	r25, Y+38	; 0x26
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9a a3       	std	Y+34, r25	; 0x22
    2292:	89 a3       	std	Y+33, r24	; 0x21
    2294:	89 a1       	ldd	r24, Y+33	; 0x21
    2296:	9a a1       	ldd	r25, Y+34	; 0x22
    2298:	9e 8f       	std	Y+30, r25	; 0x1e
    229a:	8d 8f       	std	Y+29, r24	; 0x1d
    229c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <Temp_Setting_Mode+0x5f0>
    22a4:	9e 8f       	std	Y+30, r25	; 0x1e
    22a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	Send_Number(de7k);
    22a8:	fe 01       	movw	r30, r28
    22aa:	ed 59       	subi	r30, 0x9D	; 157
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	aa ef       	ldi	r26, 0xFA	; 250
    22ba:	b3 e4       	ldi	r27, 0x43	; 67
    22bc:	89 8f       	std	Y+25, r24	; 0x19
    22be:	9a 8f       	std	Y+26, r25	; 0x1a
    22c0:	ab 8f       	std	Y+27, r26	; 0x1b
    22c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	69 8d       	ldd	r22, Y+25	; 0x19
    22c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a e7       	ldi	r20, 0x7A	; 122
    22d2:	53 e4       	ldi	r21, 0x43	; 67
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	8d 8b       	std	Y+21, r24	; 0x15
    22de:	9e 8b       	std	Y+22, r25	; 0x16
    22e0:	af 8b       	std	Y+23, r26	; 0x17
    22e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22e4:	6d 89       	ldd	r22, Y+21	; 0x15
    22e6:	7e 89       	ldd	r23, Y+22	; 0x16
    22e8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ea:	98 8d       	ldd	r25, Y+24	; 0x18
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	2c f4       	brge	.+10     	; 0x2306 <Temp_Setting_Mode+0x656>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9c 8b       	std	Y+20, r25	; 0x14
    2302:	8b 8b       	std	Y+19, r24	; 0x13
    2304:	3f c0       	rjmp	.+126    	; 0x2384 <Temp_Setting_Mode+0x6d4>
	else if (__tmp > 65535)
    2306:	6d 89       	ldd	r22, Y+21	; 0x15
    2308:	7e 89       	ldd	r23, Y+22	; 0x16
    230a:	8f 89       	ldd	r24, Y+23	; 0x17
    230c:	98 8d       	ldd	r25, Y+24	; 0x18
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	4c f5       	brge	.+82     	; 0x2370 <Temp_Setting_Mode+0x6c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	69 8d       	ldd	r22, Y+25	; 0x19
    2320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9c 8b       	std	Y+20, r25	; 0x14
    2344:	8b 8b       	std	Y+19, r24	; 0x13
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <Temp_Setting_Mode+0x6b6>
    2348:	89 e1       	ldi	r24, 0x19	; 25
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9a 8b       	std	Y+18, r25	; 0x12
    234e:	89 8b       	std	Y+17, r24	; 0x11
    2350:	89 89       	ldd	r24, Y+17	; 0x11
    2352:	9a 89       	ldd	r25, Y+18	; 0x12
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <Temp_Setting_Mode+0x6a4>
    2358:	9a 8b       	std	Y+18, r25	; 0x12
    235a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	8b 89       	ldd	r24, Y+19	; 0x13
    235e:	9c 89       	ldd	r25, Y+20	; 0x14
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	9c 8b       	std	Y+20, r25	; 0x14
    2364:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	8b 89       	ldd	r24, Y+19	; 0x13
    2368:	9c 89       	ldd	r25, Y+20	; 0x14
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f7       	brne	.-38     	; 0x2348 <Temp_Setting_Mode+0x698>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <Temp_Setting_Mode+0x6e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	6d 89       	ldd	r22, Y+21	; 0x15
    2372:	7e 89       	ldd	r23, Y+22	; 0x16
    2374:	8f 89       	ldd	r24, Y+23	; 0x17
    2376:	98 8d       	ldd	r25, Y+24	; 0x18
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9c 8b       	std	Y+20, r25	; 0x14
    2382:	8b 8b       	std	Y+19, r24	; 0x13
    2384:	8b 89       	ldd	r24, Y+19	; 0x13
    2386:	9c 89       	ldd	r25, Y+20	; 0x14
    2388:	98 8b       	std	Y+16, r25	; 0x10
    238a:	8f 87       	std	Y+15, r24	; 0x0f
    238c:	8f 85       	ldd	r24, Y+15	; 0x0f
    238e:	98 89       	ldd	r25, Y+16	; 0x10
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <Temp_Setting_Mode+0x6e0>
    2394:	98 8b       	std	Y+16, r25	; 0x10
    2396:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	SevenSegment_OFF();
    2398:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SevenSegment_OFF>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	aa ef       	ldi	r26, 0xFA	; 250
    23a2:	b3 e4       	ldi	r27, 0x43	; 67
    23a4:	8b 87       	std	Y+11, r24	; 0x0b
    23a6:	9c 87       	std	Y+12, r25	; 0x0c
    23a8:	ad 87       	std	Y+13, r26	; 0x0d
    23aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a e7       	ldi	r20, 0x7A	; 122
    23ba:	53 e4       	ldi	r21, 0x43	; 67
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8f 83       	std	Y+7, r24	; 0x07
    23c6:	98 87       	std	Y+8, r25	; 0x08
    23c8:	a9 87       	std	Y+9, r26	; 0x09
    23ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <Temp_Setting_Mode+0x73e>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	3f c0       	rjmp	.+126    	; 0x246c <Temp_Setting_Mode+0x7bc>
	else if (__tmp > 65535)
    23ee:	6f 81       	ldd	r22, Y+7	; 0x07
    23f0:	78 85       	ldd	r23, Y+8	; 0x08
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2402:	18 16       	cp	r1, r24
    2404:	4c f5       	brge	.+82     	; 0x2458 <Temp_Setting_Mode+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	6b 85       	ldd	r22, Y+11	; 0x0b
    2408:	7c 85       	ldd	r23, Y+12	; 0x0c
    240a:	8d 85       	ldd	r24, Y+13	; 0x0d
    240c:	9e 85       	ldd	r25, Y+14	; 0x0e
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	0f c0       	rjmp	.+30     	; 0x244e <Temp_Setting_Mode+0x79e>
    2430:	89 e1       	ldi	r24, 0x19	; 25
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <Temp_Setting_Mode+0x78c>
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	69 f7       	brne	.-38     	; 0x2430 <Temp_Setting_Mode+0x780>
    2456:	14 c0       	rjmp	.+40     	; 0x2480 <Temp_Setting_Mode+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <Temp_Setting_Mode+0x7c8>
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(500);
		SevenSegment_ON();
    2480:	0e 94 42 15 	call	0x2a84	; 0x2a84 <SevenSegment_ON>
		Send_Number(de7k);
    2484:	fe 01       	movw	r30, r28
    2486:	ed 59       	subi	r30, 0x9D	; 157
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 81       	ld	r24, Z
    248c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>


	ADC_INTERRUPT_ENABLE();
    2490:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ADC_INTERRUPT_ENABLE>
//	}
//	else
//	{
//		//NOTHING
//	}
}
    2494:	cd 59       	subi	r28, 0x9D	; 157
    2496:	df 4f       	sbci	r29, 0xFF	; 255
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	08 95       	ret

000024ac <compare_temp>:

void compare_temp (u8 Copy_u8SetTemp , u8 Copy_u8SensedTemp)
{
    24ac:	df 93       	push	r29
    24ae:	cf 93       	push	r28
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <compare_temp+0x6>
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	89 83       	std	Y+1, r24	; 0x01
    24b8:	6a 83       	std	Y+2, r22	; 0x02
	if (Mode == 1)
    24ba:	80 91 71 01 	lds	r24, 0x0171
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	f9 f4       	brne	.+62     	; 0x2500 <compare_temp+0x54>
	{
		if (Copy_u8SetTemp > Copy_u8SensedTemp)
    24c2:	99 81       	ldd	r25, Y+1	; 0x01
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	89 17       	cp	r24, r25
    24c8:	28 f4       	brcc	.+10     	; 0x24d4 <compare_temp+0x28>
		{
			Heater_ON();
    24ca:	0e 94 86 13 	call	0x270c	; 0x270c <Heater_ON>
			CoolingElement_OFF();
    24ce:	0e 94 aa 13 	call	0x2754	; 0x2754 <CoolingElement_OFF>
    24d2:	16 c0       	rjmp	.+44     	; 0x2500 <compare_temp+0x54>
			//Toggle_led();
		}
		else if (Copy_u8SetTemp < Copy_u8SensedTemp)
    24d4:	99 81       	ldd	r25, Y+1	; 0x01
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	98 17       	cp	r25, r24
    24da:	50 f4       	brcc	.+20     	; 0x24f0 <compare_temp+0x44>
		{
			Heater_OFF();
    24dc:	0e 94 92 13 	call	0x2724	; 0x2724 <Heater_OFF>
			CoolingElement_ON();
    24e0:	0e 94 9e 13 	call	0x273c	; 0x273c <CoolingElement_ON>
			DIO_u8SetPinValue(DIO_PIN7 , DIO_PORTC , PIN_HIGH);
    24e4:	87 e0       	ldi	r24, 0x07	; 7
    24e6:	62 e0       	ldi	r22, 0x02	; 2
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
    24ee:	08 c0       	rjmp	.+16     	; 0x2500 <compare_temp+0x54>
		}
		else if (Copy_u8SetTemp == Copy_u8SensedTemp)
    24f0:	99 81       	ldd	r25, Y+1	; 0x01
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	98 17       	cp	r25, r24
    24f6:	21 f4       	brne	.+8      	; 0x2500 <compare_temp+0x54>
		{
			Heater_OFF();
    24f8:	0e 94 92 13 	call	0x2724	; 0x2724 <Heater_OFF>
			CoolingElement_OFF();
    24fc:	0e 94 aa 13 	call	0x2754	; 0x2754 <CoolingElement_OFF>
		}
	}
	else{

	}
}
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <Toggle_led>:
void Toggle_led (void)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	6c 97       	sbiw	r28, 0x1c	; 28
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
		DIO_u8SetPinValue(DIO_PIN7 , DIO_PORTC , PIN_HIGH);
    251e:	87 e0       	ldi	r24, 0x07	; 7
    2520:	62 e0       	ldi	r22, 0x02	; 2
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	aa e7       	ldi	r26, 0x7A	; 122
    252e:	b4 e4       	ldi	r27, 0x44	; 68
    2530:	89 8f       	std	Y+25, r24	; 0x19
    2532:	9a 8f       	std	Y+26, r25	; 0x1a
    2534:	ab 8f       	std	Y+27, r26	; 0x1b
    2536:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	69 8d       	ldd	r22, Y+25	; 0x19
    253a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8d 8b       	std	Y+21, r24	; 0x15
    2552:	9e 8b       	std	Y+22, r25	; 0x16
    2554:	af 8b       	std	Y+23, r26	; 0x17
    2556:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2558:	6d 89       	ldd	r22, Y+21	; 0x15
    255a:	7e 89       	ldd	r23, Y+22	; 0x16
    255c:	8f 89       	ldd	r24, Y+23	; 0x17
    255e:	98 8d       	ldd	r25, Y+24	; 0x18
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <Toggle_led+0x70>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 8b       	std	Y+20, r25	; 0x14
    2576:	8b 8b       	std	Y+19, r24	; 0x13
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <Toggle_led+0xee>
	else if (__tmp > 65535)
    257a:	6d 89       	ldd	r22, Y+21	; 0x15
    257c:	7e 89       	ldd	r23, Y+22	; 0x16
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <Toggle_led+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	69 8d       	ldd	r22, Y+25	; 0x19
    2594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9c 8b       	std	Y+20, r25	; 0x14
    25b8:	8b 8b       	std	Y+19, r24	; 0x13
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <Toggle_led+0xd0>
    25bc:	89 e1       	ldi	r24, 0x19	; 25
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9a 8b       	std	Y+18, r25	; 0x12
    25c2:	89 8b       	std	Y+17, r24	; 0x11
    25c4:	89 89       	ldd	r24, Y+17	; 0x11
    25c6:	9a 89       	ldd	r25, Y+18	; 0x12
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <Toggle_led+0xbe>
    25cc:	9a 8b       	std	Y+18, r25	; 0x12
    25ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
    25d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <Toggle_led+0xb2>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <Toggle_led+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6d 89       	ldd	r22, Y+21	; 0x15
    25e6:	7e 89       	ldd	r23, Y+22	; 0x16
    25e8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ea:	98 8d       	ldd	r25, Y+24	; 0x18
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	98 8b       	std	Y+16, r25	; 0x10
    25fe:	8f 87       	std	Y+15, r24	; 0x0f
    2600:	8f 85       	ldd	r24, Y+15	; 0x0f
    2602:	98 89       	ldd	r25, Y+16	; 0x10
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <Toggle_led+0xfa>
    2608:	98 8b       	std	Y+16, r25	; 0x10
    260a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		DIO_u8SetPinValue(DIO_PIN7 , DIO_PORTC , PIN_LOW);
    260c:	87 e0       	ldi	r24, 0x07	; 7
    260e:	62 e0       	ldi	r22, 0x02	; 2
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	aa e7       	ldi	r26, 0x7A	; 122
    261c:	b4 e4       	ldi	r27, 0x44	; 68
    261e:	8b 87       	std	Y+11, r24	; 0x0b
    2620:	9c 87       	std	Y+12, r25	; 0x0c
    2622:	ad 87       	std	Y+13, r26	; 0x0d
    2624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	6b 85       	ldd	r22, Y+11	; 0x0b
    2628:	7c 85       	ldd	r23, Y+12	; 0x0c
    262a:	8d 85       	ldd	r24, Y+13	; 0x0d
    262c:	9e 85       	ldd	r25, Y+14	; 0x0e
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a e7       	ldi	r20, 0x7A	; 122
    2634:	53 e4       	ldi	r21, 0x43	; 67
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8f 83       	std	Y+7, r24	; 0x07
    2640:	98 87       	std	Y+8, r25	; 0x08
    2642:	a9 87       	std	Y+9, r26	; 0x09
    2644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <Toggle_led+0x15e>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <Toggle_led+0x1dc>
	else if (__tmp > 65535)
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <Toggle_led+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	6b 85       	ldd	r22, Y+11	; 0x0b
    2682:	7c 85       	ldd	r23, Y+12	; 0x0c
    2684:	8d 85       	ldd	r24, Y+13	; 0x0d
    2686:	9e 85       	ldd	r25, Y+14	; 0x0e
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <Toggle_led+0x1be>
    26aa:	89 e1       	ldi	r24, 0x19	; 25
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <Toggle_led+0x1ac>
    26ba:	9c 83       	std	Y+4, r25	; 0x04
    26bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <Toggle_led+0x1a0>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <Toggle_led+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	78 85       	ldd	r23, Y+8	; 0x08
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <Toggle_led+0x1e8>
    26f6:	9a 83       	std	Y+2, r25	; 0x02
    26f8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
}
    26fa:	6c 96       	adiw	r28, 0x1c	; 28
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <Heater_ON>:
void Heater_ON (void)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PIN4 ,DIO_PORTD,PIN_HIGH);
    2714:	84 e0       	ldi	r24, 0x04	; 4
    2716:	63 e0       	ldi	r22, 0x03	; 3
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
}
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <Heater_OFF>:
void Heater_OFF (void)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PIN4 , DIO_PORTD , PIN_LOW);
    272c:	84 e0       	ldi	r24, 0x04	; 4
    272e:	63 e0       	ldi	r22, 0x03	; 3
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
}
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <CoolingElement_ON>:
void CoolingElement_ON (void)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PIN1 , DIO_PORTA , PIN_HIGH);
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
}
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <CoolingElement_OFF>:
void CoolingElement_OFF (void)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PIN1 , DIO_PORTA , PIN_LOW);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
}
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <Button_APP>:

void Button_APP (void)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
	static u8 Count=1;
	if ((Count%2 == 0)) //OFF
    2774:	80 91 6c 01 	lds	r24, 0x016C
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	81 70       	andi	r24, 0x01	; 1
    277e:	90 70       	andi	r25, 0x00	; 0
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	c1 f4       	brne	.+48     	; 0x27b4 <Button_APP+0x48>
	{
		Heater_OFF();
    2784:	0e 94 92 13 	call	0x2724	; 0x2724 <Heater_OFF>
		CoolingElement_OFF();
    2788:	0e 94 aa 13 	call	0x2754	; 0x2754 <CoolingElement_OFF>
		SevenSegment_OFF();
    278c:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <SevenSegment_OFF>
		//SET LED OFF
		DIO_u8SetPinValue(DIO_PIN7 , DIO_PORTC , PIN_LOW);
    2790:	87 e0       	ldi	r24, 0x07	; 7
    2792:	62 e0       	ldi	r22, 0x02	; 2
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
		EEPROM_Write_Byte(0,SetTemp);
    279a:	20 91 68 01 	lds	r18, 0x0168
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	62 2f       	mov	r22, r18
    27a4:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EEPROM_Write_Byte>
		Flag = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	80 93 83 01 	sts	0x0183, r24
		Mode = 0;
    27ae:	10 92 71 01 	sts	0x0171, r1
    27b2:	13 c0       	rjmp	.+38     	; 0x27da <Button_APP+0x6e>
	}
	else if ((Count%2) != 0) //ON
    27b4:	80 91 6c 01 	lds	r24, 0x016C
    27b8:	88 2f       	mov	r24, r24
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	81 70       	andi	r24, 0x01	; 1
    27be:	90 70       	andi	r25, 0x00	; 0
    27c0:	88 23       	and	r24, r24
    27c2:	59 f0       	breq	.+22     	; 0x27da <Button_APP+0x6e>
	{
		SevenSegment_ON();
    27c4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <SevenSegment_ON>
		Send_Number(1);
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
		Flag = 2;
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	80 93 83 01 	sts	0x0183, r24
		Mode = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	80 93 71 01 	sts	0x0171, r24
	}
	Count++ ;
    27da:	80 91 6c 01 	lds	r24, 0x016C
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	80 93 6c 01 	sts	0x016C, r24
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <UP_Button>:
void UP_Button (void)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
	if (Mode ==1)
    27f2:	80 91 71 01 	lds	r24, 0x0171
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	c9 f4       	brne	.+50     	; 0x282c <UP_Button+0x42>
	{
		Send_Number(SetTemp);
    27fa:	80 91 68 01 	lds	r24, 0x0168
    27fe:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
		if ((SetTemp<75)) //limit of temp
    2802:	80 91 68 01 	lds	r24, 0x0168
    2806:	8b 34       	cpi	r24, 0x4B	; 75
    2808:	68 f4       	brcc	.+26     	; 0x2824 <UP_Button+0x3a>
		{
			SetTemp=INC_5_BUTTON(SetTemp); //assign to the previous number of set number the new increased value
    280a:	80 91 68 01 	lds	r24, 0x0168
    280e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <INC_5_BUTTON>
    2812:	80 93 68 01 	sts	0x0168, r24
			Send_Number(SetTemp); //function send the new number to the seven segment
    2816:	80 91 68 01 	lds	r24, 0x0168
    281a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
			Temp_Setting_Mode();
    281e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <Temp_Setting_Mode>
    2822:	04 c0       	rjmp	.+8      	; 0x282c <UP_Button+0x42>

		}
		else
		{
			Send_Number(SetTemp);
    2824:	80 91 68 01 	lds	r24, 0x0168
    2828:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
		}
	}
}
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <DOWN_Button>:

void DOWN_Button (void)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
	if (Mode==1)
    283a:	80 91 71 01 	lds	r24, 0x0171
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	c9 f4       	brne	.+50     	; 0x2874 <DOWN_Button+0x42>
	{
		Send_Number(SetTemp);
    2842:	80 91 68 01 	lds	r24, 0x0168
    2846:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
		if ((SetTemp>35))
    284a:	80 91 68 01 	lds	r24, 0x0168
    284e:	84 32       	cpi	r24, 0x24	; 36
    2850:	68 f0       	brcs	.+26     	; 0x286c <DOWN_Button+0x3a>
		{
			SetTemp=DEC_5_BUTTON(SetTemp);
    2852:	80 91 68 01 	lds	r24, 0x0168
    2856:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <DEC_5_BUTTON>
    285a:	80 93 68 01 	sts	0x0168, r24
			Send_Number(SetTemp);
    285e:	80 91 68 01 	lds	r24, 0x0168
    2862:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
			Temp_Setting_Mode();
    2866:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <Temp_Setting_Mode>
    286a:	04 c0       	rjmp	.+8      	; 0x2874 <DOWN_Button+0x42>

		}
		else
		{
			Send_Number(SetTemp);
    286c:	80 91 68 01 	lds	r24, 0x0168
    2870:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
		}
	}
}
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <ADC_SensorTemperature>:

void ADC_SensorTemperature(void)
{
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	2d 97       	sbiw	r28, 0x0d	; 13
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
	/*ya5od 10 aryat w ygib average bt3hom w b3d kda y3mlhom convert*/
	if (Mode == 1)
    2892:	80 91 71 01 	lds	r24, 0x0171
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	09 f0       	breq	.+2      	; 0x289c <ADC_SensorTemperature+0x22>
    289a:	7f c0       	rjmp	.+254    	; 0x299a <ADC_SensorTemperature+0x120>
	{
		u8 Temperature_Ten_Readings[10]={};
    289c:	8a e0       	ldi	r24, 0x0A	; 10
    289e:	fe 01       	movw	r30, r28
    28a0:	34 96       	adiw	r30, 0x04	; 4
    28a2:	df 01       	movw	r26, r30
    28a4:	98 2f       	mov	r25, r24
    28a6:	1d 92       	st	X+, r1
    28a8:	9a 95       	dec	r25
    28aa:	e9 f7       	brne	.-6      	; 0x28a6 <ADC_SensorTemperature+0x2c>
		static u8 Count_Readings=0;
		u16 Temp_Total = 0;
    28ac:	1b 82       	std	Y+3, r1	; 0x03
    28ae:	1a 82       	std	Y+2, r1	; 0x02

		for (Count_Readings=0 ; Count_Readings <10 ;  Count_Readings ++)
    28b0:	10 92 78 01 	sts	0x0178, r1
    28b4:	6d c0       	rjmp	.+218    	; 0x2990 <ADC_SensorTemperature+0x116>
		{
			Temperature_Ten_Readings[Count_Readings]=ADC_u16DigitalRead();
    28b6:	80 91 78 01 	lds	r24, 0x0178
    28ba:	08 2f       	mov	r16, r24
    28bc:	10 e0       	ldi	r17, 0x00	; 0
    28be:	0e 94 01 08 	call	0x1002	; 0x1002 <ADC_u16DigitalRead>
    28c2:	28 2f       	mov	r18, r24
    28c4:	ce 01       	movw	r24, r28
    28c6:	04 96       	adiw	r24, 0x04	; 4
    28c8:	fc 01       	movw	r30, r24
    28ca:	e0 0f       	add	r30, r16
    28cc:	f1 1f       	adc	r31, r17
    28ce:	20 83       	st	Z, r18

			if (Count_Readings ==9)
    28d0:	80 91 78 01 	lds	r24, 0x0178
    28d4:	89 30       	cpi	r24, 0x09	; 9
    28d6:	09 f0       	breq	.+2      	; 0x28da <ADC_SensorTemperature+0x60>
    28d8:	56 c0       	rjmp	.+172    	; 0x2986 <ADC_SensorTemperature+0x10c>
			{
				for(u8 i=0 ; i<10 ; i++)
    28da:	19 82       	std	Y+1, r1	; 0x01
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <ADC_SensorTemperature+0x8c>
				{
					Temp_Total += Temperature_Ten_Readings[i];
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	ce 01       	movw	r24, r28
    28e6:	04 96       	adiw	r24, 0x04	; 4
    28e8:	fc 01       	movw	r30, r24
    28ea:	e2 0f       	add	r30, r18
    28ec:	f3 1f       	adc	r31, r19
    28ee:	80 81       	ld	r24, Z
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	82 0f       	add	r24, r18
    28fa:	93 1f       	adc	r25, r19
    28fc:	9b 83       	std	Y+3, r25	; 0x03
    28fe:	8a 83       	std	Y+2, r24	; 0x02
		{
			Temperature_Ten_Readings[Count_Readings]=ADC_u16DigitalRead();

			if (Count_Readings ==9)
			{
				for(u8 i=0 ; i<10 ; i++)
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	8a 30       	cpi	r24, 0x0A	; 10
    290a:	48 f3       	brcs	.-46     	; 0x28de <ADC_SensorTemperature+0x64>
				{
					Temp_Total += Temperature_Ten_Readings[i];
				}
				Sensor_Reading = Temp_Total/10;
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	2a e0       	ldi	r18, 0x0A	; 10
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	b9 01       	movw	r22, r18
    2916:	0e 94 c7 18 	call	0x318e	; 0x318e <__udivmodhi4>
    291a:	cb 01       	movw	r24, r22
    291c:	cc 01       	movw	r24, r24
    291e:	a0 e0       	ldi	r26, 0x00	; 0
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	80 93 74 01 	sts	0x0174, r24
    2932:	90 93 75 01 	sts	0x0175, r25
    2936:	a0 93 76 01 	sts	0x0176, r26
    293a:	b0 93 77 01 	sts	0x0177, r27
				Sensor_Reading = (Sensor_Reading/2.074)+1;
    293e:	80 91 74 01 	lds	r24, 0x0174
    2942:	90 91 75 01 	lds	r25, 0x0175
    2946:	a0 91 76 01 	lds	r26, 0x0176
    294a:	b0 91 77 01 	lds	r27, 0x0177
    294e:	bc 01       	movw	r22, r24
    2950:	cd 01       	movw	r24, r26
    2952:	2a e6       	ldi	r18, 0x6A	; 106
    2954:	3c eb       	ldi	r19, 0xBC	; 188
    2956:	44 e0       	ldi	r20, 0x04	; 4
    2958:	50 e4       	ldi	r21, 0x40	; 64
    295a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e8       	ldi	r20, 0x80	; 128
    296c:	5f e3       	ldi	r21, 0x3F	; 63
    296e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	80 93 74 01 	sts	0x0174, r24
    297a:	90 93 75 01 	sts	0x0175, r25
    297e:	a0 93 76 01 	sts	0x0176, r26
    2982:	b0 93 77 01 	sts	0x0177, r27
	{
		u8 Temperature_Ten_Readings[10]={};
		static u8 Count_Readings=0;
		u16 Temp_Total = 0;

		for (Count_Readings=0 ; Count_Readings <10 ;  Count_Readings ++)
    2986:	80 91 78 01 	lds	r24, 0x0178
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	80 93 78 01 	sts	0x0178, r24
    2990:	80 91 78 01 	lds	r24, 0x0178
    2994:	8a 30       	cpi	r24, 0x0A	; 10
    2996:	08 f4       	brcc	.+2      	; 0x299a <ADC_SensorTemperature+0x120>
    2998:	8e cf       	rjmp	.-228    	; 0x28b6 <ADC_SensorTemperature+0x3c>
				Sensor_Reading = Temp_Total/10;
				Sensor_Reading = (Sensor_Reading/2.074)+1;
			}
		}
	}
}
    299a:	2d 96       	adiw	r28, 0x0d	; 13
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	1f 91       	pop	r17
    29ac:	0f 91       	pop	r16
    29ae:	08 95       	ret

000029b0 <Timer1_Interrupt_Function>:
void Timer1_Interrupt_Function(void)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
	if (Mode == 1)
    29b8:	80 91 71 01 	lds	r24, 0x0171
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	99 f4       	brne	.+38     	; 0x29e6 <Timer1_Interrupt_Function+0x36>
	{
		ADC_u16StartConversion_Interrupt(0);
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	0e 94 de 07 	call	0xfbc	; 0xfbc <ADC_u16StartConversion_Interrupt>
		Send_Number(Sensor_Reading);
    29c6:	80 91 74 01 	lds	r24, 0x0174
    29ca:	90 91 75 01 	lds	r25, 0x0175
    29ce:	a0 91 76 01 	lds	r26, 0x0176
    29d2:	b0 91 77 01 	lds	r27, 0x0177
    29d6:	bc 01       	movw	r22, r24
    29d8:	cd 01       	movw	r24, r26
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Send_Number>
	}
}
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	08 95       	ret

000029ec <Return_ReadingOfSensor>:

u8 Return_ReadingOfSensor (void)
{
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
	return Sensor_Reading;
    29f4:	80 91 74 01 	lds	r24, 0x0174
    29f8:	90 91 75 01 	lds	r25, 0x0175
    29fc:	a0 91 76 01 	lds	r26, 0x0176
    2a00:	b0 91 77 01 	lds	r27, 0x0177
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
}
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <Return_SetTemp>:

u8 Return_SetTemp (void)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
	return SetTemp;
    2a1e:	80 91 68 01 	lds	r24, 0x0168
}
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <Return_Mode>:

u8 Return_Mode(void)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
	return Mode;
    2a30:	80 91 71 01 	lds	r24, 0x0171
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <SevenSegment_INIT>:
#include "Project.h"
#include <util/delay.h>


void SevenSegment_INIT (void)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	// seven segment initialisation
	DIO_u8SetPinDirection(DIO_PIN4 , DIO_PORTA , PIN_OUTPUT);
    2a42:	84 e0       	ldi	r24, 0x04	; 4
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN5 , DIO_PORTA , PIN_OUTPUT);
    2a4c:	85 e0       	ldi	r24, 0x05	; 5
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN6 , DIO_PORTA , PIN_OUTPUT);
    2a56:	86 e0       	ldi	r24, 0x06	; 6
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	41 e0       	ldi	r20, 0x01	; 1
    2a5c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN7 , DIO_PORTA , PIN_OUTPUT);
    2a60:	87 e0       	ldi	r24, 0x07	; 7
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	41 e0       	ldi	r20, 0x01	; 1
    2a66:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_PIN0 , DIO_PORTB , PIN_OUTPUT);
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	61 e0       	ldi	r22, 0x01	; 1
    2a6e:	41 e0       	ldi	r20, 0x01	; 1
    2a70:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN1 , DIO_PORTB , PIN_OUTPUT);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	61 e0       	ldi	r22, 0x01	; 1
    2a78:	41 e0       	ldi	r20, 0x01	; 1
    2a7a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinDirection>
}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <SevenSegment_ON>:
void SevenSegment_ON (void)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	0f 92       	push	r0
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
	u8 Mode = Return_Mode();
    2a8e:	0e 94 14 15 	call	0x2a28	; 0x2a28 <Return_Mode>
    2a92:	89 83       	std	Y+1, r24	; 0x01
	if (Mode ==1)
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	51 f4       	brne	.+20     	; 0x2aae <SevenSegment_ON+0x2a>
	{
		DIO_u8SetPinValue(DIO_PIN0 , DIO_PORTB , PIN_HIGH);
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_PIN1 , DIO_PORTB , PIN_HIGH);
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	41 e0       	ldi	r20, 0x01	; 1
    2aaa:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
	}

}
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <SevenSegment_OFF>:
void SevenSegment_OFF (void)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PIN0 , DIO_PORTB , PIN_LOW);
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	61 e0       	ldi	r22, 0x01	; 1
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PIN1 , DIO_PORTB , PIN_LOW);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	40 e0       	ldi	r20, 0x00	; 0
    2ace:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_u8SetPinValue>
}
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <Send_Number>:

void Send_Number(u8 Copy_u8Number)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	a0 97       	sbiw	r28, 0x20	; 32
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	88 a3       	std	Y+32, r24	; 0x20
	for(u8 i=0 ; i<20 ; i++)
    2aee:	1f 8e       	std	Y+31, r1	; 0x1f
    2af0:	5d c1       	rjmp	.+698    	; 0x2dac <Send_Number+0x2d4>
	{
		u8 Tenth  , unit ;

		unit = Copy_u8Number%10 ;
    2af2:	88 a1       	ldd	r24, Y+32	; 0x20
    2af4:	9a e0       	ldi	r25, 0x0A	; 10
    2af6:	69 2f       	mov	r22, r25
    2af8:	0e 94 bb 18 	call	0x3176	; 0x3176 <__udivmodqi4>
    2afc:	89 2f       	mov	r24, r25
    2afe:	8d 8f       	std	Y+29, r24	; 0x1d
		Tenth = (Copy_u8Number - unit)/10 ;
    2b00:	88 a1       	ldd	r24, Y+32	; 0x20
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a9 01       	movw	r20, r18
    2b0e:	48 1b       	sub	r20, r24
    2b10:	59 0b       	sbc	r21, r25
    2b12:	ca 01       	movw	r24, r20
    2b14:	2a e0       	ldi	r18, 0x0A	; 10
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	b9 01       	movw	r22, r18
    2b1a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__divmodhi4>
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8e 8f       	std	Y+30, r24	; 0x1e

		SET_BIT(PORTB , 0);
    2b22:	a8 e3       	ldi	r26, 0x38	; 56
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e8 e3       	ldi	r30, 0x38	; 56
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	81 60       	ori	r24, 0x01	; 1
    2b2e:	8c 93       	st	X, r24
		SET_BIT(PORTB , 1);
    2b30:	a8 e3       	ldi	r26, 0x38	; 56
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e8 e3       	ldi	r30, 0x38	; 56
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	82 60       	ori	r24, 0x02	; 2
    2b3c:	8c 93       	st	X, r24
		Tenth<<= 4;
    2b3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b40:	82 95       	swap	r24
    2b42:	80 7f       	andi	r24, 0xF0	; 240
    2b44:	8e 8f       	std	Y+30, r24	; 0x1e
//		DIO_u8SetPortValue(DIO_PORTA , Tenth);
		PORTA &= 0x0F;
    2b46:	ab e3       	ldi	r26, 0x3B	; 59
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	eb e3       	ldi	r30, 0x3B	; 59
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	8f 70       	andi	r24, 0x0F	; 15
    2b52:	8c 93       	st	X, r24
		PORTA |= Tenth;
    2b54:	ab e3       	ldi	r26, 0x3B	; 59
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	eb e3       	ldi	r30, 0x3B	; 59
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	90 81       	ld	r25, Z
    2b5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b60:	89 2b       	or	r24, r25
    2b62:	8c 93       	st	X, r24
		CLR_BIT(PORTB , 0);
    2b64:	a8 e3       	ldi	r26, 0x38	; 56
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e8 e3       	ldi	r30, 0x38	; 56
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	8e 7f       	andi	r24, 0xFE	; 254
    2b70:	8c 93       	st	X, r24
		SET_BIT(PORTB , 1);
    2b72:	a8 e3       	ldi	r26, 0x38	; 56
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	e8 e3       	ldi	r30, 0x38	; 56
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	82 60       	ori	r24, 0x02	; 2
    2b7e:	8c 93       	st	X, r24
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a0 e2       	ldi	r26, 0x20	; 32
    2b86:	b1 e4       	ldi	r27, 0x41	; 65
    2b88:	89 8f       	std	Y+25, r24	; 0x19
    2b8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	69 8d       	ldd	r22, Y+25	; 0x19
    2b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	4a e7       	ldi	r20, 0x7A	; 122
    2b9e:	53 e4       	ldi	r21, 0x43	; 67
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	8d 8b       	std	Y+21, r24	; 0x15
    2baa:	9e 8b       	std	Y+22, r25	; 0x16
    2bac:	af 8b       	std	Y+23, r26	; 0x17
    2bae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <Send_Number+0xfa>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9c 8b       	std	Y+20, r25	; 0x14
    2bce:	8b 8b       	std	Y+19, r24	; 0x13
    2bd0:	3f c0       	rjmp	.+126    	; 0x2c50 <Send_Number+0x178>
	else if (__tmp > 65535)
    2bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	4c f5       	brge	.+82     	; 0x2c3c <Send_Number+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	69 8d       	ldd	r22, Y+25	; 0x19
    2bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9c 8b       	std	Y+20, r25	; 0x14
    2c10:	8b 8b       	std	Y+19, r24	; 0x13
    2c12:	0f c0       	rjmp	.+30     	; 0x2c32 <Send_Number+0x15a>
    2c14:	89 e1       	ldi	r24, 0x19	; 25
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9a 8b       	std	Y+18, r25	; 0x12
    2c1a:	89 8b       	std	Y+17, r24	; 0x11
    2c1c:	89 89       	ldd	r24, Y+17	; 0x11
    2c1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <Send_Number+0x148>
    2c24:	9a 8b       	std	Y+18, r25	; 0x12
    2c26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c28:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	9c 8b       	std	Y+20, r25	; 0x14
    2c30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	9c 89       	ldd	r25, Y+20	; 0x14
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <Send_Number+0x13c>
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <Send_Number+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c40:	8f 89       	ldd	r24, Y+23	; 0x17
    2c42:	98 8d       	ldd	r25, Y+24	; 0x18
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	9c 8b       	std	Y+20, r25	; 0x14
    2c4e:	8b 8b       	std	Y+19, r24	; 0x13
    2c50:	8b 89       	ldd	r24, Y+19	; 0x13
    2c52:	9c 89       	ldd	r25, Y+20	; 0x14
    2c54:	98 8b       	std	Y+16, r25	; 0x10
    2c56:	8f 87       	std	Y+15, r24	; 0x0f
    2c58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5a:	98 89       	ldd	r25, Y+16	; 0x10
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <Send_Number+0x184>
    2c60:	98 8b       	std	Y+16, r25	; 0x10
    2c62:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		SET_BIT(PORTB , 0);
    2c64:	a8 e3       	ldi	r26, 0x38	; 56
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e8 e3       	ldi	r30, 0x38	; 56
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	81 60       	ori	r24, 0x01	; 1
    2c70:	8c 93       	st	X, r24
		CLR_BIT(PORTB , 1);
    2c72:	a8 e3       	ldi	r26, 0x38	; 56
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e8 e3       	ldi	r30, 0x38	; 56
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8d 7f       	andi	r24, 0xFD	; 253
    2c7e:	8c 93       	st	X, r24
		unit<<= 4;
    2c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c82:	82 95       	swap	r24
    2c84:	80 7f       	andi	r24, 0xF0	; 240
    2c86:	8d 8f       	std	Y+29, r24	; 0x1d
//		DIO_u8SetPortValue(DIO_PORTA , unit);
		PORTA &= 0x0F;
    2c88:	ab e3       	ldi	r26, 0x3B	; 59
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	eb e3       	ldi	r30, 0x3B	; 59
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	8f 70       	andi	r24, 0x0F	; 15
    2c94:	8c 93       	st	X, r24
		PORTA |= unit;
    2c96:	ab e3       	ldi	r26, 0x3B	; 59
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	eb e3       	ldi	r30, 0x3B	; 59
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	90 81       	ld	r25, Z
    2ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ca2:	89 2b       	or	r24, r25
    2ca4:	8c 93       	st	X, r24
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	a0 e2       	ldi	r26, 0x20	; 32
    2cac:	b1 e4       	ldi	r27, 0x41	; 65
    2cae:	8b 87       	std	Y+11, r24	; 0x0b
    2cb0:	9c 87       	std	Y+12, r25	; 0x0c
    2cb2:	ad 87       	std	Y+13, r26	; 0x0d
    2cb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	4a e7       	ldi	r20, 0x7A	; 122
    2cc4:	53 e4       	ldi	r21, 0x43	; 67
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8f 83       	std	Y+7, r24	; 0x07
    2cd0:	98 87       	std	Y+8, r25	; 0x08
    2cd2:	a9 87       	std	Y+9, r26	; 0x09
    2cd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd8:	78 85       	ldd	r23, Y+8	; 0x08
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	2c f4       	brge	.+10     	; 0x2cf8 <Send_Number+0x220>
		__ticks = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9e 83       	std	Y+6, r25	; 0x06
    2cf4:	8d 83       	std	Y+5, r24	; 0x05
    2cf6:	3f c0       	rjmp	.+126    	; 0x2d76 <Send_Number+0x29e>
	else if (__tmp > 65535)
    2cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfa:	78 85       	ldd	r23, Y+8	; 0x08
    2cfc:	89 85       	ldd	r24, Y+9	; 0x09
    2cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	3f ef       	ldi	r19, 0xFF	; 255
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	57 e4       	ldi	r21, 0x47	; 71
    2d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	4c f5       	brge	.+82     	; 0x2d62 <Send_Number+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e2       	ldi	r20, 0x20	; 32
    2d1e:	51 e4       	ldi	r21, 0x41	; 65
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	bc 01       	movw	r22, r24
    2d2a:	cd 01       	movw	r24, r26
    2d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	9e 83       	std	Y+6, r25	; 0x06
    2d36:	8d 83       	std	Y+5, r24	; 0x05
    2d38:	0f c0       	rjmp	.+30     	; 0x2d58 <Send_Number+0x280>
    2d3a:	89 e1       	ldi	r24, 0x19	; 25
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	9c 83       	std	Y+4, r25	; 0x04
    2d40:	8b 83       	std	Y+3, r24	; 0x03
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	9c 81       	ldd	r25, Y+4	; 0x04
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <Send_Number+0x26e>
    2d4a:	9c 83       	std	Y+4, r25	; 0x04
    2d4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d50:	9e 81       	ldd	r25, Y+6	; 0x06
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d58:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	69 f7       	brne	.-38     	; 0x2d3a <Send_Number+0x262>
    2d60:	14 c0       	rjmp	.+40     	; 0x2d8a <Send_Number+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d62:	6f 81       	ldd	r22, Y+7	; 0x07
    2d64:	78 85       	ldd	r23, Y+8	; 0x08
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	9e 83       	std	Y+6, r25	; 0x06
    2d74:	8d 83       	std	Y+5, r24	; 0x05
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7a:	9a 83       	std	Y+2, r25	; 0x02
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <Send_Number+0x2aa>
    2d86:	9a 83       	std	Y+2, r25	; 0x02
    2d88:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		SET_BIT(PORTB , 0);
    2d8a:	a8 e3       	ldi	r26, 0x38	; 56
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e8 e3       	ldi	r30, 0x38	; 56
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	81 60       	ori	r24, 0x01	; 1
    2d96:	8c 93       	st	X, r24
		SET_BIT(PORTB , 1);
    2d98:	a8 e3       	ldi	r26, 0x38	; 56
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e8 e3       	ldi	r30, 0x38	; 56
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	82 60       	ori	r24, 0x02	; 2
    2da4:	8c 93       	st	X, r24
	DIO_u8SetPinValue(DIO_PIN1 , DIO_PORTB , PIN_LOW);
}

void Send_Number(u8 Copy_u8Number)
{
	for(u8 i=0 ; i<20 ; i++)
    2da6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2da8:	8f 5f       	subi	r24, 0xFF	; 255
    2daa:	8f 8f       	std	Y+31, r24	; 0x1f
    2dac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dae:	84 31       	cpi	r24, 0x14	; 20
    2db0:	08 f4       	brcc	.+2      	; 0x2db4 <Send_Number+0x2dc>
    2db2:	9f ce       	rjmp	.-706    	; 0x2af2 <Send_Number+0x1a>
		_delay_ms(10);
		SET_BIT(PORTB , 0);
		SET_BIT(PORTB , 1);
	}

}
    2db4:	a0 96       	adiw	r28, 0x20	; 32
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	08 95       	ret

00002dc6 <TIMER1_voidInit>:
#include "TIMER1_Private.h"
#include "TIMER1_Config.h"

void (*PReturnFun)(void);
void TIMER1_voidInit(void)
{
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,1);
	CLR_BIT(TCCR1B,3);
	CLR_BIT(TCCR1B,4);
#elif 	OPERATION_MODE==CTC_OCR1A

	CLR_BIT(TCCR1A,0);
    2dce:	af e4       	ldi	r26, 0x4F	; 79
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	ef e4       	ldi	r30, 0x4F	; 79
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	8e 7f       	andi	r24, 0xFE	; 254
    2dda:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    2ddc:	af e4       	ldi	r26, 0x4F	; 79
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	ef e4       	ldi	r30, 0x4F	; 79
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	8d 7f       	andi	r24, 0xFD	; 253
    2de8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    2dea:	ae e4       	ldi	r26, 0x4E	; 78
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	ee e4       	ldi	r30, 0x4E	; 78
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	88 60       	ori	r24, 0x08	; 8
    2df6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    2df8:	ae e4       	ldi	r26, 0x4E	; 78
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	ee e4       	ldi	r30, 0x4E	; 78
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	8f 7e       	andi	r24, 0xEF	; 239
    2e04:	8c 93       	st	X, r24
#endif


#if CHANNEL_MODE==CHANNEL_A
	// SElECT COMPARE OUTPUT MODE Channel A
	TCCR1A &= 0b00111111;
    2e06:	af e4       	ldi	r26, 0x4F	; 79
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	ef e4       	ldi	r30, 0x4F	; 79
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8f 73       	andi	r24, 0x3F	; 63
    2e12:	8c 93       	st	X, r24
	TCCR1A |= (COMPARE_OC1A_MODE<<6);
    2e14:	af e4       	ldi	r26, 0x4F	; 79
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	ef e4       	ldi	r30, 0x4F	; 79
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	80 64       	ori	r24, 0x40	; 64
    2e20:	8c 93       	st	X, r24
	// Activate Channel A output compare Interrupt
	SET_BIT(TIMSK,4);
    2e22:	a9 e5       	ldi	r26, 0x59	; 89
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e9 e5       	ldi	r30, 0x59	; 89
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	80 61       	ori	r24, 0x10	; 16
    2e30:	11 96       	adiw	r26, 0x01	; 1
    2e32:	9c 93       	st	X, r25
    2e34:	8e 93       	st	-X, r24
	// Activate Channel B output compare Interrupt
	SET_BIT(TIMSK,3);
#endif

// we use bit masking to select our prescaler
	TCCR1B &= 0b11111000;
    2e36:	ae e4       	ldi	r26, 0x4E	; 78
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	ee e4       	ldi	r30, 0x4E	; 78
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	88 7f       	andi	r24, 0xF8	; 248
    2e42:	8c 93       	st	X, r24
	TCCR1B |= PRESCALER;
    2e44:	ae e4       	ldi	r26, 0x4E	; 78
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	ee e4       	ldi	r30, 0x4E	; 78
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	85 60       	ori	r24, 0x05	; 5
    2e50:	8c 93       	st	X, r24

}
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <TIMER1_voidSetICR1Value>:

// Fucntion to set the Input Compare Register
void TIMER1_voidSetICR1Value(u16 Copy_u16ICR1Value)
{
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <TIMER1_voidSetICR1Value+0x6>
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	9a 83       	std	Y+2, r25	; 0x02
    2e64:	89 83       	std	Y+1, r24	; 0x01
	ICR1= Copy_u16ICR1Value;
    2e66:	e6 e4       	ldi	r30, 0x46	; 70
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	80 83       	st	Z, r24
}
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	08 95       	ret

00002e7c <TIMER1_voidSetOCR1AValue>:

// Function to set the Output Compare Register
void TIMER1_voidSetOCR1AValue(u16 Copy_u16OCR1AValue)
{
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <TIMER1_voidSetOCR1AValue+0x6>
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	9a 83       	std	Y+2, r25	; 0x02
    2e88:	89 83       	std	Y+1, r24	; 0x01
	OCR1A= Copy_u16OCR1AValue;
    2e8a:	ea e4       	ldi	r30, 0x4A	; 74
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
}
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <TIMER1_voidCallBackFunction>:

void TIMER1_voidCallBackFunction(void (*Copy_PReturnFunction)(void))
{
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <TIMER1_voidCallBackFunction+0x6>
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
	PReturnFun=Copy_PReturnFunction;
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb2:	90 93 85 01 	sts	0x0185, r25
    2eb6:	80 93 84 01 	sts	0x0184, r24
}
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <__vector_7>:

/*ISR for Timer1 COMPA*/
void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    2ec4:	1f 92       	push	r1
    2ec6:	0f 92       	push	r0
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	0f 92       	push	r0
    2ecc:	11 24       	eor	r1, r1
    2ece:	2f 93       	push	r18
    2ed0:	3f 93       	push	r19
    2ed2:	4f 93       	push	r20
    2ed4:	5f 93       	push	r21
    2ed6:	6f 93       	push	r22
    2ed8:	7f 93       	push	r23
    2eda:	8f 93       	push	r24
    2edc:	9f 93       	push	r25
    2ede:	af 93       	push	r26
    2ee0:	bf 93       	push	r27
    2ee2:	ef 93       	push	r30
    2ee4:	ff 93       	push	r31
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
	PReturnFun();
    2eee:	e0 91 84 01 	lds	r30, 0x0184
    2ef2:	f0 91 85 01 	lds	r31, 0x0185
    2ef6:	09 95       	icall
}
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	ff 91       	pop	r31
    2efe:	ef 91       	pop	r30
    2f00:	bf 91       	pop	r27
    2f02:	af 91       	pop	r26
    2f04:	9f 91       	pop	r25
    2f06:	8f 91       	pop	r24
    2f08:	7f 91       	pop	r23
    2f0a:	6f 91       	pop	r22
    2f0c:	5f 91       	pop	r21
    2f0e:	4f 91       	pop	r20
    2f10:	3f 91       	pop	r19
    2f12:	2f 91       	pop	r18
    2f14:	0f 90       	pop	r0
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	0f 90       	pop	r0
    2f1a:	1f 90       	pop	r1
    2f1c:	18 95       	reti

00002f1e <TIMER0_voidInit>:
#include "TIMER_Config.h"

void (*CallBackFun)(void);

void TIMER0_voidInit(void)
{
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
	/*OVERFLOAW INTERUPT ENABLE*/
	SET_BIT(TIMSK , 0);

#elif TIMER0_MODE==TIMER0_CTC_MODE
	/*SET CTC TIMER MODE*/
	SET_BIT(TCCR0 , 3);
    2f26:	a3 e5       	ldi	r26, 0x53	; 83
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e3 e5       	ldi	r30, 0x53	; 83
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	88 60       	ori	r24, 0x08	; 8
    2f32:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , 6);
    2f34:	a3 e5       	ldi	r26, 0x53	; 83
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e3 e5       	ldi	r30, 0x53	; 83
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	8f 7b       	andi	r24, 0xBF	; 191
    2f40:	8c 93       	st	X, r24
	/*OVERFLOAW INTERUPT ENABLE*/
	SET_BIT(TIMSK , 1);
    2f42:	a9 e5       	ldi	r26, 0x59	; 89
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e9 e5       	ldi	r30, 0x59	; 89
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	82 60       	ori	r24, 0x02	; 2
    2f4e:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , 6);
#else
#error "You have error in set TIMER0 MODE"
#endif
/*SET PRESCALER*/
	TCCR0 &=TIMER0_BITMASK_PRESCALER;
    2f50:	a3 e5       	ldi	r26, 0x53	; 83
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e3 e5       	ldi	r30, 0x53	; 83
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	88 7f       	andi	r24, 0xF8	; 248
    2f5c:	8c 93       	st	X, r24
	TCCR0|=TIMER0_PRESCALER;
    2f5e:	a3 e5       	ldi	r26, 0x53	; 83
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e3 e5       	ldi	r30, 0x53	; 83
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	85 60       	ori	r24, 0x05	; 5
    2f6a:	8c 93       	st	X, r24

#if OC0_PIN_MODE ==OC0_PIN_DISCONNECT
	CLR_BIT(TCCR0 , 5);
	CLR_BIT(TCCR0 , 4);
#elif OC0_PIN_MODE ==OC0_PIN_TOGGLE
	CLR_BIT(TCCR0 , 5);
    2f6c:	a3 e5       	ldi	r26, 0x53	; 83
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e3 e5       	ldi	r30, 0x53	; 83
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	8f 7d       	andi	r24, 0xDF	; 223
    2f78:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , 4);
    2f7a:	a3 e5       	ldi	r26, 0x53	; 83
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e3 e5       	ldi	r30, 0x53	; 83
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	80 61       	ori	r24, 0x10	; 16
    2f86:	8c 93       	st	X, r24
	CLR_BIT(TCCRO , 4);
#elif OC0_PIN_MODE ==OC0_PIN_SET
	SET_BIT(TCCRO , 5);
	SET_BIT(TCCRO , 4);
#endif
}
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <TIMER0_voidSetPrLoad>:

void TIMER0_voidSetPrLoad(u8 Copy_u8Preload)
{
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	0f 92       	push	r0
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
    2f9a:	e2 e5       	ldi	r30, 0x52	; 82
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	80 83       	st	Z, r24
}
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <TIMER0_voidSetCTCValue>:

void TIMER0_voidSetCTCValue(u8 Copy_u8CTC_Value)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	0f 92       	push	r0
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTC_Value;
    2fb6:	ec e5       	ldi	r30, 0x5C	; 92
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	80 83       	st	Z, r24
}
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <TIMER0_voidSet_CallBackFunction>:

void TIMER0_voidSet_CallBackFunction(void(*Copy_voidP_CallBackFun)(void))
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <TIMER0_voidSet_CallBackFunction+0x6>
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	9a 83       	std	Y+2, r25	; 0x02
    2fd2:	89 83       	std	Y+1, r24	; 0x01
	CallBackFun=Copy_voidP_CallBackFun;
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	90 93 7a 01 	sts	0x017A, r25
    2fdc:	80 93 79 01 	sts	0x0179, r24
}
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2fea:	1f 92       	push	r1
    2fec:	0f 92       	push	r0
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	0f 92       	push	r0
    2ff2:	11 24       	eor	r1, r1
    2ff4:	2f 93       	push	r18
    2ff6:	3f 93       	push	r19
    2ff8:	4f 93       	push	r20
    2ffa:	5f 93       	push	r21
    2ffc:	6f 93       	push	r22
    2ffe:	7f 93       	push	r23
    3000:	8f 93       	push	r24
    3002:	9f 93       	push	r25
    3004:	af 93       	push	r26
    3006:	bf 93       	push	r27
    3008:	ef 93       	push	r30
    300a:	ff 93       	push	r31
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
	CallBackFun();
    3014:	e0 91 79 01 	lds	r30, 0x0179
    3018:	f0 91 7a 01 	lds	r31, 0x017A
    301c:	09 95       	icall
}
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	ff 91       	pop	r31
    3024:	ef 91       	pop	r30
    3026:	bf 91       	pop	r27
    3028:	af 91       	pop	r26
    302a:	9f 91       	pop	r25
    302c:	8f 91       	pop	r24
    302e:	7f 91       	pop	r23
    3030:	6f 91       	pop	r22
    3032:	5f 91       	pop	r21
    3034:	4f 91       	pop	r20
    3036:	3f 91       	pop	r19
    3038:	2f 91       	pop	r18
    303a:	0f 90       	pop	r0
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	0f 90       	pop	r0
    3040:	1f 90       	pop	r1
    3042:	18 95       	reti

00003044 <TWI_voidInit>:
#include "DIO_Interface.h"
#include <util/delay.h>


void TWI_voidInit(void)
{
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x0C;
    304c:	e0 e2       	ldi	r30, 0x20	; 32
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	8c e0       	ldi	r24, 0x0C	; 12
    3052:	80 83       	st	Z, r24
	TWSR = 0x00;
    3054:	e1 e2       	ldi	r30, 0x21	; 33
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	10 82       	st	Z, r1

	TWAR = 0b00000010;
    305a:	e2 e2       	ldi	r30, 0x22	; 34
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	82 e0       	ldi	r24, 0x02	; 2
    3060:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);
    3062:	e6 e5       	ldi	r30, 0x56	; 86
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	84 e0       	ldi	r24, 0x04	; 4
    3068:	80 83       	st	Z, r24
}
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <TWI_voidStartCondition>:



void TWI_voidStartCondition(void)
{
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit
	 * Send the start bit
	 * Enable the TWI
	 */
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3078:	e6 e5       	ldi	r30, 0x56	; 86
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	84 ea       	ldi	r24, 0xA4	; 164
    307e:	80 83       	st	Z, r24
	/*Wait for the TWINT flag to set*/
	while(!GET_BIT(TWCR,TWINT));
    3080:	e6 e5       	ldi	r30, 0x56	; 86
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	88 23       	and	r24, r24
    3088:	dc f7       	brge	.-10     	; 0x3080 <TWI_voidStartCondition+0x10>
}
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <TWI_voidStopCondition>:

void TWI_voidStopCondition(void)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62

	/*	Clear the TWINT Flag before sending the stop bit
	 *  Send the stop bit
	 *  Enable the TWI
	 */
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    3098:	e6 e5       	ldi	r30, 0x56	; 86
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	84 e9       	ldi	r24, 0x94	; 148
    309e:	80 83       	st	Z, r24
}
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <TWI_voidWrite>:

void TWI_voidWrite(u8 Copy_u8Data)
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	0f 92       	push	r0
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	89 83       	std	Y+1, r24	; 0x01
	/*Put data on TWI data register*/
	TWDR = Copy_u8Data;
    30b2:	e3 e2       	ldi	r30, 0x23	; 35
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	80 83       	st	Z, r24
	/* Clear the TWINT Flag before sending the data
	 * Enable the TWI
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    30ba:	e6 e5       	ldi	r30, 0x56	; 86
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	84 e8       	ldi	r24, 0x84	; 132
    30c0:	80 83       	st	Z, r24
	/*Wait for the TWINT flag to set,
	 *which indicates that the data was sent successfully*/
	while(!GET_BIT(TWCR,TWINT));
    30c2:	e6 e5       	ldi	r30, 0x56	; 86
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	88 23       	and	r24, r24
    30ca:	dc f7       	brge	.-10     	; 0x30c2 <TWI_voidWrite+0x1c>
}
    30cc:	0f 90       	pop	r0
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	08 95       	ret

000030d4 <TWI_u8ReadWithAck>:

u8 TWI_u8ReadWithAck(void)
{
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
	/* Clear the TWINT flag
	 * Enable the Acknowledge bit
	 * Enable the TWI
	 */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    30dc:	e6 e5       	ldi	r30, 0x56	; 86
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	84 ec       	ldi	r24, 0xC4	; 196
    30e2:	80 83       	st	Z, r24
	/*wait for the TWINT flag set to indicate that recieving was successful*/
	while(!GET_BIT(TWCR,TWINT));
    30e4:	e6 e5       	ldi	r30, 0x56	; 86
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	88 23       	and	r24, r24
    30ec:	dc f7       	brge	.-10     	; 0x30e4 <TWI_u8ReadWithAck+0x10>
	/*Read data*/
	return TWDR;
    30ee:	e3 e2       	ldi	r30, 0x23	; 35
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
}
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <TWI_u8ReadWithNAck>:

u8 TWI_u8ReadWithNAck(void)
{
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
	/* Clear the TWINT flag
	 * Enable the TWI
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    3102:	e6 e5       	ldi	r30, 0x56	; 86
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	84 e8       	ldi	r24, 0x84	; 132
    3108:	80 83       	st	Z, r24
	/*wait for the TWINT flag set to indicate that recieving was successful*/
	while(!GET_BIT(TWCR,TWINT));
    310a:	e6 e5       	ldi	r30, 0x56	; 86
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	88 23       	and	r24, r24
    3112:	dc f7       	brge	.-10     	; 0x310a <TWI_u8ReadWithNAck+0x10>
	/*Read data*/
	return TWDR;
    3114:	e3 e2       	ldi	r30, 0x23	; 35
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
}
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	08 95       	ret

00003120 <TWI_u8getStatus>:

u8 TWI_u8getStatus(void)
{
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	0f 92       	push	r0
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
	u8 Status;
	/*masking the eliminate first 3 bits and get last 5 bits*/
	Status = TWSR & 0xF8;
    312a:	e1 e2       	ldi	r30, 0x21	; 33
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	88 7f       	andi	r24, 0xF8	; 248
    3132:	89 83       	std	Y+1, r24	; 0x01
	return Status;
    3134:	89 81       	ldd	r24, Y+1	; 0x01
}
    3136:	0f 90       	pop	r0
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <main>:
#include "TIMER_Interface.h"



int main (void)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	00 d0       	rcall	.+0      	; 0x3144 <main+0x6>
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62

	project_init();
    3148:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <project_init>
	EEPROM_Init();
    314c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <EEPROM_Init>
	u8 SensorReading;
	u8 SetTemp;
	while(1)
	{
		SensorReading = Return_ReadingOfSensor();
    3150:	0e 94 f6 14 	call	0x29ec	; 0x29ec <Return_ReadingOfSensor>
    3154:	89 83       	std	Y+1, r24	; 0x01
		SetTemp = Return_SetTemp();
    3156:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <Return_SetTemp>
    315a:	8a 83       	std	Y+2, r24	; 0x02
		compare_temp(SetTemp , SensorReading);
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	69 81       	ldd	r22, Y+1	; 0x01
    3160:	0e 94 56 12 	call	0x24ac	; 0x24ac <compare_temp>
		EEPROM_Read_Byte(0,&SetTemp);
    3164:	9e 01       	movw	r18, r28
    3166:	2e 5f       	subi	r18, 0xFE	; 254
    3168:	3f 4f       	sbci	r19, 0xFF	; 255
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	b9 01       	movw	r22, r18
    3170:	0e 94 bb 0b 	call	0x1776	; 0x1776 <EEPROM_Read_Byte>
    3174:	ed cf       	rjmp	.-38     	; 0x3150 <main+0x12>

00003176 <__udivmodqi4>:
    3176:	99 1b       	sub	r25, r25
    3178:	79 e0       	ldi	r23, 0x09	; 9
    317a:	04 c0       	rjmp	.+8      	; 0x3184 <__udivmodqi4_ep>

0000317c <__udivmodqi4_loop>:
    317c:	99 1f       	adc	r25, r25
    317e:	96 17       	cp	r25, r22
    3180:	08 f0       	brcs	.+2      	; 0x3184 <__udivmodqi4_ep>
    3182:	96 1b       	sub	r25, r22

00003184 <__udivmodqi4_ep>:
    3184:	88 1f       	adc	r24, r24
    3186:	7a 95       	dec	r23
    3188:	c9 f7       	brne	.-14     	; 0x317c <__udivmodqi4_loop>
    318a:	80 95       	com	r24
    318c:	08 95       	ret

0000318e <__udivmodhi4>:
    318e:	aa 1b       	sub	r26, r26
    3190:	bb 1b       	sub	r27, r27
    3192:	51 e1       	ldi	r21, 0x11	; 17
    3194:	07 c0       	rjmp	.+14     	; 0x31a4 <__udivmodhi4_ep>

00003196 <__udivmodhi4_loop>:
    3196:	aa 1f       	adc	r26, r26
    3198:	bb 1f       	adc	r27, r27
    319a:	a6 17       	cp	r26, r22
    319c:	b7 07       	cpc	r27, r23
    319e:	10 f0       	brcs	.+4      	; 0x31a4 <__udivmodhi4_ep>
    31a0:	a6 1b       	sub	r26, r22
    31a2:	b7 0b       	sbc	r27, r23

000031a4 <__udivmodhi4_ep>:
    31a4:	88 1f       	adc	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	5a 95       	dec	r21
    31aa:	a9 f7       	brne	.-22     	; 0x3196 <__udivmodhi4_loop>
    31ac:	80 95       	com	r24
    31ae:	90 95       	com	r25
    31b0:	bc 01       	movw	r22, r24
    31b2:	cd 01       	movw	r24, r26
    31b4:	08 95       	ret

000031b6 <__divmodhi4>:
    31b6:	97 fb       	bst	r25, 7
    31b8:	09 2e       	mov	r0, r25
    31ba:	07 26       	eor	r0, r23
    31bc:	0a d0       	rcall	.+20     	; 0x31d2 <__divmodhi4_neg1>
    31be:	77 fd       	sbrc	r23, 7
    31c0:	04 d0       	rcall	.+8      	; 0x31ca <__divmodhi4_neg2>
    31c2:	e5 df       	rcall	.-54     	; 0x318e <__udivmodhi4>
    31c4:	06 d0       	rcall	.+12     	; 0x31d2 <__divmodhi4_neg1>
    31c6:	00 20       	and	r0, r0
    31c8:	1a f4       	brpl	.+6      	; 0x31d0 <__divmodhi4_exit>

000031ca <__divmodhi4_neg2>:
    31ca:	70 95       	com	r23
    31cc:	61 95       	neg	r22
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255

000031d0 <__divmodhi4_exit>:
    31d0:	08 95       	ret

000031d2 <__divmodhi4_neg1>:
    31d2:	f6 f7       	brtc	.-4      	; 0x31d0 <__divmodhi4_exit>
    31d4:	90 95       	com	r25
    31d6:	81 95       	neg	r24
    31d8:	9f 4f       	sbci	r25, 0xFF	; 255
    31da:	08 95       	ret

000031dc <__prologue_saves__>:
    31dc:	2f 92       	push	r2
    31de:	3f 92       	push	r3
    31e0:	4f 92       	push	r4
    31e2:	5f 92       	push	r5
    31e4:	6f 92       	push	r6
    31e6:	7f 92       	push	r7
    31e8:	8f 92       	push	r8
    31ea:	9f 92       	push	r9
    31ec:	af 92       	push	r10
    31ee:	bf 92       	push	r11
    31f0:	cf 92       	push	r12
    31f2:	df 92       	push	r13
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	ca 1b       	sub	r28, r26
    3206:	db 0b       	sbc	r29, r27
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	cd bf       	out	0x3d, r28	; 61
    3212:	09 94       	ijmp

00003214 <__epilogue_restores__>:
    3214:	2a 88       	ldd	r2, Y+18	; 0x12
    3216:	39 88       	ldd	r3, Y+17	; 0x11
    3218:	48 88       	ldd	r4, Y+16	; 0x10
    321a:	5f 84       	ldd	r5, Y+15	; 0x0f
    321c:	6e 84       	ldd	r6, Y+14	; 0x0e
    321e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3220:	8c 84       	ldd	r8, Y+12	; 0x0c
    3222:	9b 84       	ldd	r9, Y+11	; 0x0b
    3224:	aa 84       	ldd	r10, Y+10	; 0x0a
    3226:	b9 84       	ldd	r11, Y+9	; 0x09
    3228:	c8 84       	ldd	r12, Y+8	; 0x08
    322a:	df 80       	ldd	r13, Y+7	; 0x07
    322c:	ee 80       	ldd	r14, Y+6	; 0x06
    322e:	fd 80       	ldd	r15, Y+5	; 0x05
    3230:	0c 81       	ldd	r16, Y+4	; 0x04
    3232:	1b 81       	ldd	r17, Y+3	; 0x03
    3234:	aa 81       	ldd	r26, Y+2	; 0x02
    3236:	b9 81       	ldd	r27, Y+1	; 0x01
    3238:	ce 0f       	add	r28, r30
    323a:	d1 1d       	adc	r29, r1
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	f8 94       	cli
    3240:	de bf       	out	0x3e, r29	; 62
    3242:	0f be       	out	0x3f, r0	; 63
    3244:	cd bf       	out	0x3d, r28	; 61
    3246:	ed 01       	movw	r28, r26
    3248:	08 95       	ret

0000324a <_exit>:
    324a:	f8 94       	cli

0000324c <__stop_program>:
    324c:	ff cf       	rjmp	.-2      	; 0x324c <__stop_program>
